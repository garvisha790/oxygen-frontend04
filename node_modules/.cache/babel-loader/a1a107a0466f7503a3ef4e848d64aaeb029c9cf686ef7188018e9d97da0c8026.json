{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Garvisha\\\\Desktop\\\\New folder (2)\\\\Front\\\\oxygen-frontend\\\\src\\\\pages\\\\TelemetryDashboard.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { getPlants } from \"../services/plantService\";\nimport { getDevices } from \"../services/deviceService\";\nimport { getLatestTelemetryEntry, getRealtimeTelemetryData, getTelemetryData, clearDeviceCache } from \"../services/telemetryService\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement } from \"chart.js\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement);\nimport { Container, Select, MenuItem, FormControl, InputLabel, Table, TableBody, TableCell, TableHead, TableRow, Paper, Box, Typography, CircularProgress, Button, Grid, Divider, TableContainer } from \"@mui/material\";\nimport Sidebar from \"../components/Sidebar\";\nimport { useTheme } from '@mui/material/styles';\n\n// Custom circular progress visualization component that matches the reference UI\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MetricCircle = ({\n  value,\n  label,\n  color,\n  size = 100,\n  thickness = 5\n}) => {\n  _s();\n  const theme = useTheme();\n  const displayValue = value || 0;\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      m: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        position: 'relative',\n        display: 'inline-flex',\n        mb: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n        variant: \"determinate\",\n        value: 75 // Fixed angle for the visual style\n        ,\n        size: size,\n        thickness: thickness,\n        sx: {\n          color: color || theme.palette.primary.main,\n          transform: 'rotate(135deg)',\n          '& .MuiCircularProgress-circle': {\n            strokeLinecap: 'round'\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n          position: 'absolute',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          component: \"div\",\n          fontWeight: \"bold\",\n          children: [displayValue, label === 'Temperature' ? '°C' : label === 'Humidity' || label === 'Oil Level' ? '%' : '']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      component: \"div\",\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(MetricCircle, \"VrMvFCCB9Haniz3VCRPNUiCauHs=\", false, function () {\n  return [useTheme];\n});\n_c = MetricCircle;\nconst TelemetryDashboard = () => {\n  _s2();\n  const theme = useTheme();\n  const [plants, setPlants] = useState([]);\n  const [devices, setDevices] = useState([]);\n  const [selectedPlant, setSelectedPlant] = useState(\"\");\n  const [selectedDevice, setSelectedDevice] = useState(\"esp32\");\n  const [telemetryData, setTelemetryData] = useState([]);\n  const [latestEntry, setLatestEntry] = useState(null);\n  const [realtimeData, setRealtimeData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState(\"status\");\n  const [connectionStatus, setConnectionStatus] = useState(\"disconnected\");\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        beginAtZero: true,\n        grid: {\n          color: '#f0f0f0'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      }\n    }\n  };\n  useEffect(() => {\n    const fetchPlants = async () => {\n      try {\n        setLoading(true);\n        const plantData = await getPlants();\n        if (plantData && plantData.length > 0) {\n          setPlants(plantData);\n          if (!selectedPlant) {\n            setSelectedPlant(plantData[0]._id);\n          }\n        }\n      } catch (error) {\n        console.error(\"❌ Error fetching plants:\", error);\n        setError(\"Failed to load plants. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPlants();\n  }, []); // Run only once on mount\n\n  useEffect(() => {\n    const fetchDevices = async () => {\n      if (!selectedPlant) {\n        setDevices([]);\n        setSelectedDevice(\"\");\n        return;\n      }\n      try {\n        setLoading(true);\n        setDevices([]); // Ensure previous devices are cleared\n        setSelectedDevice(\"\"); // Reset device selection\n        const deviceData = await getDevices(selectedPlant);\n        if (deviceData && deviceData.length > 0) {\n          setDevices(deviceData);\n          if (!selectedDevice) {\n            setSelectedDevice(deviceData[0]._id);\n          }\n        } else {\n          setDevices([]);\n          setSelectedDevice(\"\");\n        }\n      } catch (error) {\n        console.error(\"❌ Error fetching devices:\", error);\n        setError(\"Failed to load devices. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDevices();\n  }, [selectedPlant]); // Fetch devices when the plant selection changes\n\n  const fetchLatestEntry = useCallback(async () => {\n    if (!selectedDevice) {\n      setLatestEntry(null);\n      setConnectionStatus(\"disconnected\");\n      return;\n    }\n    try {\n      const data = await getLatestTelemetryEntry(selectedDevice);\n      if (data) {\n        setLatestEntry(data);\n        setConnectionStatus(\"connected\");\n        setError(null);\n      } else {\n        setConnectionStatus(\"no data\");\n        setError(\"No telemetry data available for this device.\");\n      }\n    } catch (error) {\n      console.error(\"❌ Error fetching latest telemetry:\", error);\n      setConnectionStatus(\"error\");\n      setError(\"Failed to fetch latest telemetry data.\");\n    }\n  }, [selectedDevice]);\n  const fetchRealtimeData = useCallback(async () => {\n    if (!selectedDevice) {\n      setRealtimeData([]);\n      return;\n    }\n    try {\n      setLoading(true);\n      const data = await getRealtimeTelemetryData(selectedDevice);\n      setLoading(false);\n      if (data && data.length > 0) {\n        setRealtimeData(data);\n        setError(null);\n      } else {\n        // No real-time data? Try historical data\n        try {\n          const historicalData = await getTelemetryData(selectedDevice);\n          if (historicalData && historicalData.length > 0) {\n            setRealtimeData(historicalData.slice(0, 20));\n            setError(\"No real-time data available. Showing historical data instead.\");\n          } else {\n            setError(\"No telemetry data available.\");\n          }\n        } catch (innerError) {\n          console.error(\"❌ Error fetching historical data:\", innerError);\n          setError(\"Failed to fetch any telemetry data.\");\n        }\n      }\n    } catch (error) {\n      setLoading(false);\n      console.error(\"❌ Error fetching realtime data:\", error);\n      setError(\"Failed to fetch real-time data.\");\n    }\n  }, [selectedDevice]);\n  const fetchHistoricalData = useCallback(async () => {\n    if (!selectedDevice) {\n      setTelemetryData([]);\n      return;\n    }\n    try {\n      setLoading(true);\n      const data = await getTelemetryData(selectedDevice);\n      setLoading(false);\n      if (data && data.length > 0) {\n        setTelemetryData(data.slice(0, 20)); // Limit to last 20 entries\n        setError(null);\n        if (!latestEntry && data.length > 0) {\n          const sortedData = [...data].sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n          setLatestEntry(sortedData[0]);\n        }\n      } else {\n        setError(\"No historical telemetry data available.\");\n      }\n    } catch (error) {\n      setLoading(false);\n      console.error(\"❌ Error fetching historical data:\", error);\n      setError(\"Failed to fetch telemetry data.\");\n    }\n  }, [selectedDevice, latestEntry]);\n  useEffect(() => {\n    if (!selectedDevice) return;\n    clearDeviceCache(selectedDevice);\n    fetchLatestEntry();\n    fetchRealtimeData();\n    fetchHistoricalData();\n    const latestInterval = setInterval(fetchLatestEntry, 2000);\n    const realtimeInterval = setInterval(fetchRealtimeData, 3000);\n    const historicalInterval = setInterval(fetchHistoricalData, 10000);\n    return () => {\n      clearInterval(latestInterval);\n      clearInterval(realtimeInterval);\n      clearInterval(historicalInterval);\n    };\n  }, [selectedDevice, fetchLatestEntry, fetchRealtimeData, fetchHistoricalData]);\n  const handlePlantChange = e => {\n    setSelectedPlant(e.target.value);\n    setSelectedDevice(\"\");\n    clearDeviceCache();\n  };\n  const handleDeviceChange = e => {\n    setSelectedDevice(e.target.value);\n    clearDeviceCache(e.target.value);\n  };\n  const getConnectionStatus = () => {\n    switch (connectionStatus) {\n      case \"connected\":\n        return \"Connected\";\n      case \"disconnected\":\n        return \"Disconnected\";\n      case \"error\":\n        return \"Connection Error\";\n      case \"no data\":\n        return \"No data available\";\n      default:\n        return \"Unknown\";\n    }\n  };\n  const renderAlarmsTab = () => {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        textAlign: 'center',\n        py: 2\n      },\n      children: latestEntry ? /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: [latestEntry.openAlerts || 0, \" Open Alerts\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        color: \"text.secondary\",\n        children: \"No alerts data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render the command center tab content\n  const renderCommandCenterTab = () => {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        textAlign: 'center',\n        py: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        color: \"text.secondary\",\n        children: \"Command Center functionality coming soon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render device metrics in the status tab\n  const renderDeviceMetrics = () => {\n    if (!latestEntry) {\n      return /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          textAlign: 'center',\n          py: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          color: \"text.secondary\",\n          children: \"No telemetry data available for this device. Please check CosmosDB connection.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          sx: {\n            mt: 2\n          },\n          children: \"If this is a real device and data exists in CosmosDB, check that device IDs match between the frontend and database.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        fontWeight: \"bold\",\n        mb: 2,\n        children: \"Device Metrics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-around',\n          flexWrap: 'wrap',\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(MetricCircle, {\n          value: latestEntry.openAlerts || 0,\n          label: \"Open Alerts\",\n          color: \"#f44336\" // red\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MetricCircle, {\n          value: latestEntry.temperature || 0,\n          label: \"Temperature\",\n          color: \"#ff9800\" // orange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MetricCircle, {\n          value: latestEntry.humidity || 0,\n          label: \"Humidity\",\n          color: \"#2196f3\" // blue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 395,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MetricCircle, {\n          value: latestEntry.oilLevel || 0,\n          label: \"Oil Level\",\n          color: \"#4caf50\" // green\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 7\n    }, this);\n  };\n  const temperatureChartData = telemetryData !== null && telemetryData !== void 0 && telemetryData.length ? telemetryData.map(entry => ({\n    timestamp: new Date(entry.timestamp).toLocaleTimeString(),\n    temperature: entry.temperature\n  })) : [];\n  const oilLevelChartData = telemetryData !== null && telemetryData !== void 0 && telemetryData.length ? telemetryData.map(entry => ({\n    timestamp: new Date(entry.timestamp).toLocaleTimeString(),\n    oilLevel: entry.oilLevel\n  })) : [];\n\n  // Render charts section\n  const renderCharts = () => {\n    if (realtimeData.length === 0) {\n      return /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          textAlign: 'center',\n          py: 3,\n          mt: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          color: \"text.secondary\",\n          children: \"No telemetry data available in CosmosDB to display charts.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          sx: {\n            mt: 1\n          },\n          children: \"Please ensure data is being properly stored in the CosmosDB container.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        sx: {\n          mt: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            mb: 1,\n            children: \"Temperature Over Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Paper, {\n            sx: {\n              p: 2,\n              height: 250\n            },\n            children: /*#__PURE__*/_jsxDEV(Line, {\n              data: temperatureChartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            mb: 1,\n            children: \"Oil Level Over Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 450,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Paper, {\n            sx: {\n              p: 2,\n              height: 250\n            },\n            children: /*#__PURE__*/_jsxDEV(Line, {\n              data: oilLevelChartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 4\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          mb: 1,\n          children: \"Latest Readings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n          component: Paper,\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            size: \"small\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Timestamp\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 463,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Temperature (\\xB0C)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 464,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Oil Level (%)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 465,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 462,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: telemetryData.length > 0 ? telemetryData.map((item, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: new Date(item.timestamp).toLocaleString([], {\n                    year: 'numeric',\n                    month: 'numeric',\n                    day: 'numeric',\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    second: '2-digit'\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 472,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: item.temperature\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 482,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: item.oilLevel\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 483,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 21\n              }, this)) : /*#__PURE__*/_jsxDEV(TableRow, {\n                children: /*#__PURE__*/_jsxDEV(TableCell, {\n                  colSpan: 3,\n                  align: \"center\",\n                  children: \"No data available\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 488,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 487,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 457,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 503,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      sx: {\n        mt: 4,\n        mb: 4,\n        ml: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        fontWeight: \"bold\",\n        mb: 3,\n        children: \"Telemetry Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"plant-select-label\",\n              children: \"Select Plant\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 513,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"plant-select-label\",\n              value: selectedPlant,\n              onChange: handlePlantChange,\n              label: \"Select Plant\",\n              disabled: loading,\n              children: plants.map(plant => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: plant._id,\n                children: plant.plantName\n              }, plant._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 522,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 514,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 512,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            sx: {\n              mb: 2\n            },\n            disabled: !selectedPlant || loading,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"device-select-label\",\n              children: \"Select Device\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 532,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"device-select-label\",\n              value: selectedDevice,\n              onChange: handleDeviceChange,\n              label: \"Select Device\",\n              children: devices.map(device => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: device._id,\n                children: device.deviceName\n              }, device._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 540,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 533,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 531,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          my: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 11\n      }, this), selectedDevice && !loading && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            border: 1,\n            borderColor: 'divider',\n            borderRadius: 1,\n            overflow: 'hidden'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: activeTab === \"status\" ? \"contained\" : \"text\",\n            onClick: () => setActiveTab(\"status\"),\n            sx: {\n              flex: 1,\n              py: 1.5,\n              borderRadius: 0,\n              color: activeTab === \"status\" ? \"#fff\" : \"inherit\",\n              backgroundColor: activeTab === \"status\" ? \"#1976d2\" : \"transparent\"\n            },\n            children: [\"Status\", activeTab === \"status\" && /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              sx: {\n                ml: 1\n              },\n              children: getConnectionStatus()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 581,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 568,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            orientation: \"vertical\",\n            flexItem: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: activeTab === \"alarms\" ? \"contained\" : \"text\",\n            onClick: () => setActiveTab(\"alarms\"),\n            sx: {\n              flex: 1,\n              py: 1.5,\n              borderRadius: 0,\n              color: activeTab === \"alarms\" ? \"#fff\" : \"inherit\",\n              backgroundColor: activeTab === \"alarms\" ? \"#1976d2\" : \"transparent\"\n            },\n            children: [\"Alarms\", activeTab === \"alarms\" && latestEntry && /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              sx: {\n                ml: 1\n              },\n              children: [latestEntry.openAlerts || 0, \" Open Alerts console.log(\\\"latestEntry:\\\", latestEntry); console.log(\\\"Type of latestEntry.openAlerts:\\\", typeof latestEntry.openAlerts);\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 602,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            orientation: \"vertical\",\n            flexItem: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 611,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: activeTab === \"cmd\" ? \"contained\" : \"text\",\n            onClick: () => setActiveTab(\"cmd\"),\n            sx: {\n              flex: 1,\n              py: 1.5,\n              borderRadius: 0,\n              color: activeTab === \"cmd\" ? \"#fff\" : \"inherit\",\n              backgroundColor: activeTab === \"cmd\" ? \"#1976d2\" : \"transparent\"\n            },\n            children: \"Command Center\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 613,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(Paper, {\n          sx: {\n            p: 2,\n            mt: 2,\n            bgcolor: 'error.light',\n            color: 'error.main',\n            borderRadius: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 639,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 3\n          },\n          children: [activeTab === \"status\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [renderDeviceMetrics(), renderCharts()]\n          }, void 0, true), activeTab === \"alarms\" && renderAlarmsTab(), activeTab === \"cmd\" && renderCommandCenterTab()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 502,\n    columnNumber: 5\n  }, this);\n};\n_s2(TelemetryDashboard, \"Jf4zGeW2o5dFSOt15YHpQkEd61Q=\", false, function () {\n  return [useTheme];\n});\n_c2 = TelemetryDashboard;\nexport default TelemetryDashboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"MetricCircle\");\n$RefreshReg$(_c2, \"TelemetryDashboard\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","getPlants","getDevices","getLatestTelemetryEntry","getRealtimeTelemetryData","getTelemetryData","clearDeviceCache","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","ArcElement","register","Container","Select","MenuItem","FormControl","InputLabel","Table","TableBody","TableCell","TableHead","TableRow","Paper","Box","Typography","CircularProgress","Button","Grid","Divider","TableContainer","Sidebar","useTheme","jsxDEV","_jsxDEV","Fragment","_Fragment","MetricCircle","value","label","color","size","thickness","_s","theme","displayValue","sx","display","flexDirection","alignItems","m","children","position","mb","variant","palette","primary","main","transform","strokeLinecap","fileName","_jsxFileName","lineNumber","columnNumber","top","left","bottom","right","justifyContent","component","fontWeight","_c","TelemetryDashboard","_s2","plants","setPlants","devices","setDevices","selectedPlant","setSelectedPlant","selectedDevice","setSelectedDevice","telemetryData","setTelemetryData","latestEntry","setLatestEntry","realtimeData","setRealtimeData","loading","setLoading","error","setError","activeTab","setActiveTab","connectionStatus","setConnectionStatus","chartOptions","responsive","maintainAspectRatio","scales","x","grid","y","beginAtZero","plugins","legend","fetchPlants","plantData","length","_id","console","fetchDevices","deviceData","fetchLatestEntry","data","fetchRealtimeData","historicalData","slice","innerError","fetchHistoricalData","sortedData","sort","a","b","Date","timestamp","latestInterval","setInterval","realtimeInterval","historicalInterval","clearInterval","handlePlantChange","e","target","handleDeviceChange","getConnectionStatus","renderAlarmsTab","textAlign","py","openAlerts","renderCommandCenterTab","renderDeviceMetrics","mt","flexWrap","temperature","humidity","oilLevel","temperatureChartData","map","entry","toLocaleTimeString","oilLevelChartData","renderCharts","container","spacing","item","xs","md","p","height","options","index","toLocaleString","year","month","day","hour","minute","second","colSpan","align","maxWidth","ml","fullWidth","id","labelId","onChange","disabled","plant","plantName","device","deviceName","my","border","borderColor","borderRadius","overflow","onClick","flex","backgroundColor","orientation","flexItem","bgcolor","_c2","$RefreshReg$"],"sources":["C:/Users/Garvisha/Desktop/New folder (2)/Front/oxygen-frontend/src/pages/TelemetryDashboard.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\nimport { getPlants } from \"../services/plantService\";\nimport { getDevices } from \"../services/deviceService\";\nimport { \n  getLatestTelemetryEntry, \n  getRealtimeTelemetryData, \n  getTelemetryData,\n  clearDeviceCache \n} from \"../services/telemetryService\";\nimport { Line } from \"react-chartjs-2\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n} from \"chart.js\";\n\nChartJS.register(\n  CategoryScale, \n  LinearScale, \n  PointElement, \n  LineElement, \n  Title, \n  Tooltip, \n  Legend,\n  ArcElement\n);\n\nimport {\n  Container,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Paper,\n  Box,\n  Typography,\n  CircularProgress,\n  Button,\n  Grid,\n  Divider,\n  TableContainer,\n} from \"@mui/material\";\n\nimport Sidebar from \"../components/Sidebar\";\nimport { useTheme } from '@mui/material/styles';\n\n// Custom circular progress visualization component that matches the reference UI\nconst MetricCircle = ({ value, label, color, size = 100, thickness = 5 }) => {\n  const theme = useTheme();\n  const displayValue = value || 0;\n  \n  return (\n    <Box sx={{ \n      display: 'flex', \n      flexDirection: 'column', \n      alignItems: 'center',\n      m: 2\n    }}>\n      <Box sx={{ \n        position: 'relative', \n        display: 'inline-flex',\n        mb: 1\n      }}>\n        <CircularProgress\n          variant=\"determinate\"\n          value={75} // Fixed angle for the visual style\n          size={size}\n          thickness={thickness}\n          sx={{ \n            color: color || theme.palette.primary.main,\n            transform: 'rotate(135deg)',\n            '& .MuiCircularProgress-circle': {\n              strokeLinecap: 'round',\n            }\n          }}\n        />\n        <Box\n          sx={{\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0,\n            position: 'absolute',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          <Typography variant=\"h5\" component=\"div\" fontWeight=\"bold\">\n            {displayValue}\n            {label === 'Temperature' ? '°C' : label === 'Humidity' || label === 'Oil Level' ? '%' : ''}\n          </Typography>\n        </Box>\n      </Box>\n      <Typography variant=\"body1\" component=\"div\">\n        {label}\n      </Typography>\n    </Box>\n  );\n};\n\nconst TelemetryDashboard = () => {\n  const theme = useTheme();\n  const [plants, setPlants] = useState([]);\n  const [devices, setDevices] = useState([]);\n  const [selectedPlant, setSelectedPlant] = useState(\"\");\n  const [selectedDevice, setSelectedDevice] = useState(\"esp32\");\n  const [telemetryData, setTelemetryData] = useState([]);\n  const [latestEntry, setLatestEntry] = useState(null);\n  const [realtimeData, setRealtimeData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState(\"status\");\n  const [connectionStatus, setConnectionStatus] = useState(\"disconnected\");\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        beginAtZero: true,\n        grid: {\n          color: '#f0f0f0'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      }\n    }\n  };\n\n  useEffect(() => {\n    const fetchPlants = async () => {\n      try {\n        setLoading(true);\n        const plantData = await getPlants();\n        if (plantData && plantData.length > 0) {\n          setPlants(plantData);\n          if (!selectedPlant) {\n            setSelectedPlant(plantData[0]._id);\n          }\n        }\n      } catch (error) {\n        console.error(\"❌ Error fetching plants:\", error);\n        setError(\"Failed to load plants. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPlants();\n  }, []); // Run only once on mount\n  \n  useEffect(() => {\n    const fetchDevices = async () => {\n      if (!selectedPlant) {\n        setDevices([]);\n        setSelectedDevice(\"\");\n        return;\n      }\n     \n      try {\n        setLoading(true);\n        setDevices([]); // Ensure previous devices are cleared\n        setSelectedDevice(\"\"); // Reset device selection\n        const deviceData = await getDevices(selectedPlant);\n        if (deviceData && deviceData.length > 0) {\n          setDevices(deviceData);\n          if (!selectedDevice) {\n            setSelectedDevice(deviceData[0]._id);\n          }\n        } else {\n          setDevices([]);\n          setSelectedDevice(\"\");\n        }\n      } catch (error) {\n        console.error(\"❌ Error fetching devices:\", error);\n        setError(\"Failed to load devices. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n  \n    fetchDevices();\n  }, [selectedPlant]); // Fetch devices when the plant selection changes\n  \n  const fetchLatestEntry = useCallback(async () => {\n    if (!selectedDevice) {\n      setLatestEntry(null);\n      setConnectionStatus(\"disconnected\");\n      return;\n    }\n   \n    try {\n      const data = await getLatestTelemetryEntry(selectedDevice);\n      if (data) {\n        setLatestEntry(data);\n        setConnectionStatus(\"connected\");\n        setError(null);\n      } else {\n        setConnectionStatus(\"no data\");\n        setError(\"No telemetry data available for this device.\");\n      }\n    } catch (error) {\n      console.error(\"❌ Error fetching latest telemetry:\", error);\n      setConnectionStatus(\"error\");\n      setError(\"Failed to fetch latest telemetry data.\");\n    }\n  }, [selectedDevice]);\n  \n  const fetchRealtimeData = useCallback(async () => {\n    if (!selectedDevice) {\n      setRealtimeData([]);\n      return;\n    }\n   \n    try {\n      setLoading(true);\n      const data = await getRealtimeTelemetryData(selectedDevice);\n      setLoading(false);\n     \n      if (data && data.length > 0) {\n        setRealtimeData(data);\n        setError(null);\n      } else {\n        // No real-time data? Try historical data\n        try {\n          const historicalData = await getTelemetryData(selectedDevice);\n          if (historicalData && historicalData.length > 0) {\n            setRealtimeData(historicalData.slice(0, 20));\n            setError(\"No real-time data available. Showing historical data instead.\");\n          } else {\n            setError(\"No telemetry data available.\");\n          }\n        } catch (innerError) {\n          console.error(\"❌ Error fetching historical data:\", innerError);\n          setError(\"Failed to fetch any telemetry data.\");\n        }\n      }\n    } catch (error) {\n      setLoading(false);\n      console.error(\"❌ Error fetching realtime data:\", error);\n      setError(\"Failed to fetch real-time data.\");\n    }\n  }, [selectedDevice]);\n  \n  const fetchHistoricalData = useCallback(async () => {\n    if (!selectedDevice) {\n      setTelemetryData([]);\n      return;\n    }\n   \n    try {\n      setLoading(true);\n      const data = await getTelemetryData(selectedDevice);\n      setLoading(false);\n     \n      if (data && data.length > 0) {\n        setTelemetryData(data.slice(0, 20)); // Limit to last 20 entries\n        setError(null);\n       \n        if (!latestEntry && data.length > 0) {\n          const sortedData = [...data].sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n          setLatestEntry(sortedData[0]);\n        }\n      } else {\n        setError(\"No historical telemetry data available.\");\n      }\n    } catch (error) {\n      setLoading(false);\n      console.error(\"❌ Error fetching historical data:\", error);\n      setError(\"Failed to fetch telemetry data.\");\n    }\n  }, [selectedDevice, latestEntry]);\n  \n  useEffect(() => {\n    if (!selectedDevice) return;\n  \n    clearDeviceCache(selectedDevice);\n   \n    fetchLatestEntry();\n    fetchRealtimeData();\n    fetchHistoricalData();\n   \n    const latestInterval = setInterval(fetchLatestEntry, 2000);\n    const realtimeInterval = setInterval(fetchRealtimeData, 3000);\n    const historicalInterval = setInterval(fetchHistoricalData, 10000);\n   \n    return () => {\n      clearInterval(latestInterval);\n      clearInterval(realtimeInterval);\n      clearInterval(historicalInterval);\n    };\n  }, [selectedDevice, fetchLatestEntry, fetchRealtimeData, fetchHistoricalData]);\n  \n  const handlePlantChange = (e) => {\n    setSelectedPlant(e.target.value);\n    setSelectedDevice(\"\");\n    clearDeviceCache();\n  };\n  \n  const handleDeviceChange = (e) => {\n    setSelectedDevice(e.target.value);\n    clearDeviceCache(e.target.value);\n  };\n  \n  const getConnectionStatus = () => {\n    switch (connectionStatus) {\n      case \"connected\": return \"Connected\";\n      case \"disconnected\": return \"Disconnected\";\n      case \"error\": return \"Connection Error\";\n      case \"no data\": return \"No data available\";\n      default: return \"Unknown\";\n    }\n  };\n  \n  const renderAlarmsTab = () => {\n    return (\n      <Box sx={{ textAlign: 'center', py: 2 }}>\n        {latestEntry ? (\n          <Typography variant=\"h6\">{latestEntry.openAlerts || 0} Open Alerts</Typography>\n        ) : (\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            No alerts data available\n          </Typography>\n        )}\n      </Box>\n    );\n  };\n\n  // Render the command center tab content\n  const renderCommandCenterTab = () => {\n    return (\n      <Box sx={{ textAlign: 'center', py: 2 }}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          Command Center functionality coming soon\n        </Typography>\n      </Box>\n    );\n  };\n\n  // Render device metrics in the status tab\n  const renderDeviceMetrics = () => {\n    if (!latestEntry) {\n      return (\n        <Box sx={{ textAlign: 'center', py: 3 }}>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            No telemetry data available for this device. Please check CosmosDB connection.\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 2 }}>\n            If this is a real device and data exists in CosmosDB, check that device IDs match between the frontend and database.\n          </Typography>\n        </Box>\n      );\n    }\n\n    return (\n      <Box sx={{ mt: 3 }}>\n        <Typography variant=\"h6\" fontWeight=\"bold\" mb={2}>\n          Device Metrics\n        </Typography>\n        <Box sx={{ \n          display: 'flex', \n          justifyContent: 'space-around', \n          flexWrap: 'wrap',\n          mb: 3 \n        }}>\n          <MetricCircle \n            value={latestEntry.openAlerts || 0} \n            label=\"Open Alerts\" \n            color=\"#f44336\" // red\n          />\n          <MetricCircle \n            value={latestEntry.temperature || 0} \n            label=\"Temperature\" \n            color=\"#ff9800\" // orange\n          />\n          <MetricCircle \n            value={latestEntry.humidity || 0} \n            label=\"Humidity\" \n            color=\"#2196f3\" // blue\n          />\n          <MetricCircle \n            value={latestEntry.oilLevel || 0} \n            label=\"Oil Level\" \n            color=\"#4caf50\" // green\n          />\n        </Box>\n      </Box>\n    );\n  };\n\n  const temperatureChartData = telemetryData?.length\n  ? telemetryData.map(entry => ({\n      timestamp: new Date(entry.timestamp).toLocaleTimeString(),\n      temperature: entry.temperature,\n    }))\n  : [];\n\nconst oilLevelChartData = telemetryData?.length\n  ? telemetryData.map(entry => ({\n      timestamp: new Date(entry.timestamp).toLocaleTimeString(),\n      oilLevel: entry.oilLevel,\n    }))\n  : [];\n\n  // Render charts section\n  const renderCharts = () => {\n    if (realtimeData.length === 0) {\n      return (\n        <Box sx={{ textAlign: 'center', py: 3, mt: 3 }}>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            No telemetry data available in CosmosDB to display charts.\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n            Please ensure data is being properly stored in the CosmosDB container.\n          </Typography>\n        </Box>\n      );\n    }\n\n    return (\n      <>\n        <Grid container spacing={3} sx={{ mt: 2 }}>\n          <Grid item xs={12} md={6}>\n            <Typography variant=\"h6\" mb={1}>Temperature Over Time</Typography>\n            <Paper sx={{ p: 2, height: 250 }}>\n              <Line data={temperatureChartData} options={chartOptions} />\n            </Paper>\n          </Grid>\n          \n          <Grid item xs={12} md={6}>\n            <Typography variant=\"h6\" mb={1}>Oil Level Over Time</Typography>\n            <Paper sx={{ p: 2, height: 250 }}>\n              <Line data={oilLevelChartData} options={chartOptions} />\n            </Paper>\n          </Grid>\n        </Grid>\n\n        <Box sx={{ mt: 4 }}>\n          <Typography variant=\"h6\" mb={1}>Latest Readings</Typography>\n          <TableContainer component={Paper}>\n            <Table size=\"small\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>Timestamp</TableCell>\n                  <TableCell>Temperature (°C)</TableCell>\n                  <TableCell>Oil Level (%)</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {telemetryData.length > 0 ? (\n                  telemetryData.map((item, index) => (\n                    <TableRow key={index}>\n                      <TableCell>\n                        {new Date(item.timestamp).toLocaleString([], {\n                          year: 'numeric',\n                          month: 'numeric',\n                          day: 'numeric',\n                          hour: '2-digit',\n                          minute: '2-digit',\n                          second: '2-digit'\n                        })}\n                      </TableCell>\n                      <TableCell>{item.temperature}</TableCell>\n                      <TableCell>{item.oilLevel}</TableCell>\n                    </TableRow>\n                  ))\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={3} align=\"center\">\n                      No data available\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Box>\n      </>\n    );\n  };\n\n  return (\n    <Box sx={{ display: \"flex\" }}>\n      <Sidebar />\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4, ml: 4 }}>\n        <Typography variant=\"h4\" fontWeight=\"bold\" mb={3}>\n          Telemetry Dashboard\n        </Typography>\n        \n        {/* Plant and Device Selection */}\n        <Grid container spacing={2}>\n          <Grid item xs={12} md={6}>\n            <FormControl fullWidth sx={{ mb: 2 }}>\n              <InputLabel id=\"plant-select-label\">Select Plant</InputLabel>\n              <Select\n                labelId=\"plant-select-label\"\n                value={selectedPlant}\n                onChange={handlePlantChange}\n                label=\"Select Plant\"\n                disabled={loading}\n              >\n                {plants.map((plant) => (\n                  <MenuItem key={plant._id} value={plant._id}>\n                    {plant.plantName}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n          \n          <Grid item xs={12} md={6}>\n            <FormControl fullWidth sx={{ mb: 2 }} disabled={!selectedPlant || loading}>\n              <InputLabel id=\"device-select-label\">Select Device</InputLabel>\n              <Select\n                labelId=\"device-select-label\"\n                value={selectedDevice}\n                onChange={handleDeviceChange}\n                label=\"Select Device\"\n              >\n                {devices.map((device) => (\n                  <MenuItem key={device._id} value={device._id}>\n                    {device.deviceName}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n        </Grid>\n\n        {/* Loading indicator */}\n        {loading && (\n          <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>\n            <CircularProgress />\n          </Box>\n        )}\n        \n        {/* Tab navigation */}\n        {selectedDevice && !loading && (\n          <>\n            <Box \n              sx={{ \n                display: 'flex',\n                border: 1,\n                borderColor: 'divider',\n                borderRadius: 1,\n                overflow: 'hidden'\n              }}\n            >\n              <Button \n                variant={activeTab === \"status\" ? \"contained\" : \"text\"}\n                onClick={() => setActiveTab(\"status\")}\n                sx={{ \n                  flex: 1, \n                  py: 1.5,\n                  borderRadius: 0,\n                  color: activeTab === \"status\" ? \"#fff\" : \"inherit\",\n                  backgroundColor: activeTab === \"status\" ? \"#1976d2\" : \"transparent\"\n                }}\n              >\n                Status\n                {activeTab === \"status\" && (\n                  <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                    {getConnectionStatus()}\n                  </Typography>\n                )}\n              </Button>\n              \n              <Divider orientation=\"vertical\" flexItem />\n              \n              <Button \n                variant={activeTab === \"alarms\" ? \"contained\" : \"text\"}\n                onClick={() => setActiveTab(\"alarms\")}\n                sx={{ \n                  flex: 1, \n                  py: 1.5,\n                  borderRadius: 0,\n                  color: activeTab === \"alarms\" ? \"#fff\" : \"inherit\",\n                  backgroundColor: activeTab === \"alarms\" ? \"#1976d2\" : \"transparent\"\n                }}\n              >\n                Alarms\n                {activeTab === \"alarms\" && latestEntry && (\n                  <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                    {latestEntry.openAlerts || 0} Open Alerts\n                    console.log(\"latestEntry:\", latestEntry);\nconsole.log(\"Type of latestEntry.openAlerts:\", typeof latestEntry.openAlerts);\n\n                  </Typography>\n                )}\n              </Button>\n              \n              <Divider orientation=\"vertical\" flexItem />\n              \n              <Button \n                variant={activeTab === \"cmd\" ? \"contained\" : \"text\"}\n                onClick={() => setActiveTab(\"cmd\")}\n                sx={{ \n                  flex: 1, \n                  py: 1.5,\n                  borderRadius: 0,\n                  color: activeTab === \"cmd\" ? \"#fff\" : \"inherit\",\n                  backgroundColor: activeTab === \"cmd\" ? \"#1976d2\" : \"transparent\"\n                }}\n              >\n                Command Center\n              </Button>\n            </Box>\n\n            {/* Error message */}\n            {error && (\n              <Paper \n                sx={{ \n                  p: 2, \n                  mt: 2, \n                  bgcolor: 'error.light', \n                  color: 'error.main',\n                  borderRadius: 1\n                }}\n              >\n                <Typography>{error}</Typography>\n              </Paper>\n            )}\n            \n            {/* Tab content */}\n            <Box sx={{ mt: 3 }}>\n              {activeTab === \"status\" && (\n                <>\n                  {renderDeviceMetrics()}\n                  {renderCharts()}\n                </>\n              )}\n              \n              {activeTab === \"alarms\" && renderAlarmsTab()}\n              \n              {activeTab === \"cmd\" && renderCommandCenterTab()}\n            </Box>\n          </>\n        )}\n      </Container>\n    </Box>\n  );\n};\n\nexport default TelemetryDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}