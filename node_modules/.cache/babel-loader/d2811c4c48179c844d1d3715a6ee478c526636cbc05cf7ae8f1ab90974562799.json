{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Garvisha\\\\Desktop\\\\New folder (2)\\\\Front\\\\oxygen-frontend\\\\src\\\\pages\\\\TelemetryDashboard.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { getPlants } from \"../services/plantService\";\nimport { getDevices } from \"../services/deviceService\";\nimport { getThresholdValue, updateThresholdValue } from '../services/telemetryService';\nimport { getLatestTelemetryEntry, getRealtimeTelemetryData, getTelemetryData, clearDeviceCache } from \"../services/telemetryService\";\nimport { Line } from \"react-chartjs-2\";\nimport TextField from '@mui/material/TextField';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement } from \"chart.js\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement);\nimport { Container, Select, MenuItem, FormControl, InputLabel, Table, TableBody, TableCell, TableHead, TableRow, Paper, Box, Typography, CircularProgress, Button, Grid, Divider, TableContainer } from \"@mui/material\";\nimport Sidebar from \"../components/Sidebar\";\nimport { useTheme } from '@mui/material/styles';\n\n// Custom circular progress visualization component that matches the reference UI\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MetricCircle = ({\n  value,\n  label,\n  color,\n  size = 100,\n  thickness = 5\n}) => {\n  _s();\n  const theme = useTheme();\n  const displayValue = value || 0;\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      m: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        position: 'relative',\n        display: 'inline-flex',\n        mb: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n        variant: \"determinate\",\n        value: 75 // Fixed angle for the visual style\n        ,\n        size: size,\n        thickness: thickness,\n        sx: {\n          color: color || theme.palette.primary.main,\n          transform: 'rotate(135deg)',\n          '& .MuiCircularProgress-circle': {\n            strokeLinecap: 'round'\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n          position: 'absolute',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          component: \"div\",\n          fontWeight: \"bold\",\n          children: [displayValue, label === 'Temperature' ? '°C' : label === 'Humidity' || label === 'Oil Level' ? '%' : '']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      component: \"div\",\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n_s(MetricCircle, \"VrMvFCCB9Haniz3VCRPNUiCauHs=\", false, function () {\n  return [useTheme];\n});\n_c = MetricCircle;\nconst TelemetryDashboard = () => {\n  _s2();\n  const [selectedConfigType, setSelectedConfigType] = useState('');\n  const [selectedCommandType, setSelectedCommandType] = useState(\"\");\n  const [liveCommandValue, setLiveCommandValue] = useState('');\n  const [selectedMetric, setSelectedMetric] = useState(null);\n  const [newThreshold, setNewThreshold] = useState('');\n  const theme = useTheme();\n  const [plants, setPlants] = useState([]);\n  const [devices, setDevices] = useState([]);\n  const [selectedPlant, setSelectedPlant] = useState(\"\");\n  const [selectedDevice, setSelectedDevice] = useState(\"esp32\");\n  const [telemetryData, setTelemetryData] = useState([]);\n  const [latestEntry, setLatestEntry] = useState(null);\n  const [realtimeData, setRealtimeData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState(\"status\");\n  const [connectionStatus, setConnectionStatus] = useState(\"disconnected\");\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        beginAtZero: true,\n        grid: {\n          color: '#f0f0f0'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      }\n    }\n  };\n  useEffect(() => {\n    const fetchPlants = async () => {\n      try {\n        setLoading(true);\n        const plantData = await getPlants();\n        setPlants(plantData);\n        if (plantData.length > 0) {\n          setSelectedPlant(plantData[0]._id);\n        }\n      } catch (error) {\n        console.error(\"❌ Error fetching plants:\", error);\n        setError(\"Failed to load plants. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPlants();\n  }, []); // Run only once on mount\n\n  useEffect(() => {\n    const fetchDevices = async () => {\n      if (!selectedPlant) {\n        return;\n      }\n      try {\n        setLoading(true);\n        const deviceData = await getDevices(selectedPlant);\n        setDevices(deviceData);\n        if (deviceData.length > 0) {\n          setSelectedDevice(deviceData[0]._id); // Use deviceId\n        }\n      } catch (error) {\n        console.error(\"❌ Error fetching devices:\", error);\n        setError(\"Failed to load devices. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDevices();\n  }, [selectedPlant]); // Fetch devices when the plant selection changes\n\n  const fetchLatestEntry = useCallback(async () => {\n    if (!selectedDevice) return;\n    try {\n      const data = await getLatestTelemetryEntry(selectedDevice);\n      console.log(\"Latest telemetry entry:\", data);\n      if (data) {\n        // Properly normalize the data structure\n        const normalized = {\n          alerts: Array.isArray(data.alerts) ? data.alerts : [],\n          temperature: typeof data.temperature === 'object' ? data.temperature.value : typeof data.temperature === 'number' ? data.temperature : 0,\n          humidity: typeof data.humidity === 'object' ? data.humidity.value : typeof data.humidity === 'number' ? data.humidity : 0,\n          oilLevel: typeof data.oilLevel === 'object' ? data.oilLevel.value : typeof data.oilLevel === 'number' ? data.oilLevel : 0\n        };\n        console.log(\"Normalized latest entry:\", normalized);\n        setLatestEntry(normalized);\n        setConnectionStatus(\"connected\");\n      } else {\n        setLatestEntry(null);\n        setConnectionStatus(\"no data\");\n      }\n    } catch (error) {\n      console.error(\"❌ Error fetching latest telemetry:\", error);\n      setLatestEntry(null);\n      setConnectionStatus(\"error\");\n    }\n  }, [selectedDevice]);\n  const fetchRealtimeData = useCallback(async () => {\n    if (!selectedDevice) return;\n    try {\n      const data = await getRealtimeTelemetryData(selectedDevice);\n      setRealtimeData(data);\n    } catch (error) {\n      console.error(\"❌ Error fetching realtime data:\", error);\n      setRealtimeData([]);\n    }\n  }, [selectedDevice]);\n  const fetchHistoricalData = useCallback(async () => {\n    if (!selectedDevice) {\n      setTelemetryData([]);\n      return;\n    }\n    try {\n      const data = await getTelemetryData(selectedDevice);\n      if ((data === null || data === void 0 ? void 0 : data.length) > 0) {\n        const processedData = data.map(entry => {\n          var _entry$temperature, _entry$oilLevel;\n          return {\n            ...entry,\n            temperature: ((_entry$temperature = entry.temperature) === null || _entry$temperature === void 0 ? void 0 : _entry$temperature.value) || entry.temperature || 0,\n            oilLevel: ((_entry$oilLevel = entry.oilLevel) === null || _entry$oilLevel === void 0 ? void 0 : _entry$oilLevel.value) || entry.oilLevel || 0,\n            timestamp: entry.timestamp\n          };\n        });\n        setTelemetryData(processedData.slice(0, 20));\n        setError(null);\n      }\n    } catch (error) {\n      console.error(\"❌ Error fetching historical data:\", error);\n      setError(\"Failed to fetch telemetry data.\");\n    }\n  }, [selectedDevice]);\n  useEffect(() => {\n    const fetchThreshold = async () => {\n      if (selectedDevice && selectedConfigType) {\n        const threshold = await getThresholdValue(selectedDevice, selectedConfigType.toLowerCase());\n        setCurrentThreshold(threshold);\n      }\n    };\n    fetchThreshold();\n  }, [selectedDevice, selectedConfigType]);\n  const handleThresholdUpdate = async () => {\n    if (!newThreshold || isNaN(newThreshold)) return alert(\"Please enter a valid number\");\n    const success = await updateThresholdValue(selectedDevice, selectedConfigType.toLowerCase(), newThreshold);\n    if (success) {\n      alert(`${selectedConfigType} threshold updated successfully!`);\n      setCurrentThreshold(newThreshold);\n      setNewThreshold('');\n    } else {\n      alert(\"Failed to update threshold. Try again.\");\n    }\n  };\n  useEffect(() => {\n    if (!selectedDevice) return;\n\n    // Initial data fetch - all at once\n    Promise.all([fetchLatestEntry(), fetchRealtimeData(), fetchHistoricalData()]).then(() => {\n      setLoading(false);\n    });\n\n    // Optimize intervals for better UX:\n    // - Faster initial updates\n    // - Longer display time for readability\n    // - Staggered updates to prevent simultaneous fetches\n    const latestInterval = setInterval(fetchLatestEntry, 3000); // Every 3 seconds\n    const realtimeInterval = setInterval(fetchRealtimeData, 5000); // Every 5 seconds\n    const historicalInterval = setInterval(fetchHistoricalData, 15000); // Every 15 seconds\n\n    return () => {\n      clearInterval(latestInterval);\n      clearInterval(realtimeInterval);\n      clearInterval(historicalInterval);\n    };\n  }, [selectedDevice, fetchLatestEntry, fetchRealtimeData, fetchHistoricalData]);\n  const handlePlantChange = e => {\n    setSelectedPlant(e.target.value);\n    setSelectedDevice(\"\");\n    clearDeviceCache();\n  };\n  const debouncedLoading = useCallback(value => {\n    setTimeout(() => setLoading(value), value ? 0 : 300);\n  }, []);\n  const handleDeviceChange = e => {\n    const newDeviceId = e.target.value;\n    debouncedLoading(true);\n    setSelectedDevice(newDeviceId);\n    clearDeviceCache(newDeviceId);\n\n    // Reset data states when device changes\n    setTelemetryData([]);\n    setRealtimeData([]);\n    setLatestEntry(null);\n    setError(null);\n  };\n  const getConnectionStatus = () => {\n    switch (connectionStatus) {\n      case \"connected\":\n        return \"Connected\";\n      case \"disconnected\":\n        return \"Disconnected\";\n      case \"error\":\n        return \"Connection Error\";\n      case \"no data\":\n        return \"No data available\";\n      default:\n        return \"Unknown\";\n    }\n  };\n  const renderAlarmsTab = () => {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        textAlign: 'center',\n        py: 2\n      },\n      children: latestEntry ? /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: [typeof latestEntry.openAlerts === 'object' ? latestEntry.openAlerts.value || 0 : latestEntry.openAlerts || 0, \" Open Alerts\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        color: \"text.secondary\",\n        children: \"No alerts data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render the command center tab content\n  const renderCommandCenterTab = () => /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(FormControl, {\n      fullWidth: true,\n      sx: {\n        mb: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n        children: \"Select Metric\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        value: selectedMetric,\n        onChange: e => setSelectedMetric(e.target.value),\n        label: \"Select Metric\",\n        children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"temperature\",\n          children: \"Temperature\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"humidity\",\n          children: \"Humidity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          value: \"oilLevel\",\n          children: \"Oil Level\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 3\n    }, this), currentThreshold !== null && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle1\",\n        children: [\"Current Threshold: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: currentThreshold\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 28\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Enter Threshold\",\n      variant: \"outlined\",\n      fullWidth: true,\n      value: threshold,\n      onChange: e => {\n        const value = e.target.value;\n        if (/^\\d*\\.?\\d*$/.test(value)) {\n          setThreshold(value); // Only numbers allowed\n        }\n      },\n      sx: {\n        mb: 2\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      fullWidth: true,\n      onClick: async () => {\n        if (threshold === '') {\n          alert('Please enter a valid number');\n          return;\n        }\n        try {\n          const response = await fetch('http://10.178.20.127:3000/api/device/command', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              threshold: parseFloat(threshold),\n              deviceId: selectedDevice,\n              metric: selectedMetric\n            })\n          });\n          const result = await response.json();\n          console.log('Threshold updated:', result);\n          setCurrentThreshold(threshold); // Save it in UI\n        } catch (err) {\n          console.error('Error updating threshold:', err);\n          alert('Failed to update config');\n        }\n      },\n      sx: {\n        mb: 2\n      },\n      children: \"Update Config\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      color: \"error\",\n      fullWidth: true,\n      onClick: () => {\n        setThreshold('');\n        setCurrentThreshold(null);\n      },\n      children: \"Restart Device\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 383,\n    columnNumber: 5\n  }, this);\n  // Render device metrics in the status tab\n  const renderDeviceMetrics = () => {\n    var _latestEntry$alerts;\n    if (!latestEntry) {\n      return /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          textAlign: 'center',\n          py: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          color: \"text.secondary\",\n          children: \"No telemetry data available for this device. Please check CosmosDB connection.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          sx: {\n            mt: 2\n          },\n          children: \"If this is a real device and data exists in CosmosDB, check that device IDs match between the frontend and database.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 9\n      }, this);\n    }\n\n    //console.log(\"latestEntry:\", telemetryData);\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        fontWeight: \"bold\",\n        mb: 2,\n        children: \"Device Metrics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-around',\n          flexWrap: 'wrap',\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(MetricCircle, {\n          value: ((_latestEntry$alerts = latestEntry.alerts) === null || _latestEntry$alerts === void 0 ? void 0 : _latestEntry$alerts.length) || 0,\n          label: \"Open Alerts\",\n          color: \"#f44336\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MetricCircle, {\n          value: Number(latestEntry.temperature).toFixed(1),\n          label: \"Temperature\",\n          color: \"#ff9800\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MetricCircle, {\n          value: Number(latestEntry.humidity).toFixed(1),\n          label: \"Humidity\",\n          color: \"#2196f3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(MetricCircle, {\n          value: Number(latestEntry.oilLevel).toFixed(1),\n          label: \"Oil Level\",\n          color: \"#4caf50\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 7\n    }, this);\n  };\n  const temperatureChartData = {\n    labels: (telemetryData === null || telemetryData === void 0 ? void 0 : telemetryData.map(entry => new Date(entry.timestamp).toLocaleTimeString())) || [],\n    datasets: [{\n      label: 'Temperature',\n      data: (telemetryData === null || telemetryData === void 0 ? void 0 : telemetryData.map(entry => {\n        if (typeof entry.temperature === 'object') {\n          return entry.temperature.value || 0;\n        }\n        return entry.temperature || 0;\n      })) || [],\n      borderColor: '#ff9800',\n      tension: 0.1\n    }]\n  };\n  const oilLevelChartData = {\n    labels: (telemetryData === null || telemetryData === void 0 ? void 0 : telemetryData.map(entry => new Date(entry.timestamp).toLocaleTimeString())) || [],\n    datasets: [{\n      label: 'Oil Level',\n      data: (telemetryData === null || telemetryData === void 0 ? void 0 : telemetryData.map(entry => {\n        if (typeof entry.oilLevel === 'object') {\n          return entry.oilLevel.value || 0;\n        }\n        return entry.oilLevel || 0;\n      })) || [],\n      borderColor: '#4caf50',\n      tension: 0.1\n    }]\n  };\n\n  // Update the table rendering section in renderCharts\n  const renderCharts = () => {\n    if (!selectedDevice || realtimeData.length === 0) {\n      return /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          textAlign: 'center',\n          py: 3,\n          mt: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          color: \"text.secondary\",\n          children: \"No telemetry data available for this device in CosmosDB.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          sx: {\n            mt: 1\n          },\n          children: \"Please select a device that has data stored in the CosmosDB container.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 563,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        sx: {\n          mt: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            mb: 1,\n            children: \"Temperature Over Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 574,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Paper, {\n            sx: {\n              p: 2,\n              height: 250\n            },\n            children: /*#__PURE__*/_jsxDEV(Line, {\n              data: temperatureChartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 576,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 575,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            mb: 1,\n            children: \"Oil Level Over Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 581,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Paper, {\n            sx: {\n              p: 2,\n              height: 250\n            },\n            children: /*#__PURE__*/_jsxDEV(Line, {\n              data: oilLevelChartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 583,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 582,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 572,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 4\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          mb: 1,\n          children: \"Latest Readings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n          component: Paper,\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            size: \"small\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Timestamp\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 594,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Temperature (\\xB0C)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 595,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Oil Level (%)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 596,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 593,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 592,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: telemetryData.length > 0 ? telemetryData.map((item, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: new Date(item.timestamp).toLocaleString()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 603,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: typeof item.temperature === 'object' && item.temperature.value !== undefined ? item.temperature.value : typeof item.temperature === 'number' ? item.temperature : '0'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 606,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: typeof item.oilLevel === 'object' && item.oilLevel.value !== undefined ? item.oilLevel.value : typeof item.oilLevel === 'number' ? item.oilLevel : '0'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 613,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 602,\n                columnNumber: 21\n              }, this)) : /*#__PURE__*/_jsxDEV(TableRow, {\n                children: /*#__PURE__*/_jsxDEV(TableCell, {\n                  colSpan: 3,\n                  align: \"center\",\n                  children: \"Waiting for real-time data...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 624,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 623,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 599,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 588,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 639,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      sx: {\n        mt: 4,\n        mb: 4,\n        ml: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        fontWeight: \"bold\",\n        mb: 3,\n        children: \"Telemetry Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"plant-select-label\",\n              children: \"Select Plant\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 649,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"plant-select-label\",\n              value: selectedPlant,\n              onChange: handlePlantChange,\n              label: \"Select Plant\",\n              disabled: loading,\n              children: plants.map(plant => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: plant._id,\n                children: plant.plantName\n              }, plant._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 658,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 650,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 648,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            sx: {\n              mb: 2\n            },\n            disabled: !selectedPlant || loading,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"device-select-label\",\n              children: \"Select Device\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 668,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"device-select-label\",\n              value: selectedDevice,\n              onChange: handleDeviceChange,\n              label: \"Select Device\",\n              children: devices.map(device => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: device._id,\n                children: device.deviceName\n              }, device._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 676,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 669,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 667,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          my: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 688,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 11\n      }, this), selectedDevice && !loading && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            border: 1,\n            borderColor: 'divider',\n            borderRadius: 1,\n            overflow: 'hidden'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: activeTab === \"status\" ? \"contained\" : \"text\",\n            onClick: () => setActiveTab(\"status\"),\n            sx: {\n              flex: 1,\n              py: 1.5,\n              borderRadius: 0,\n              color: activeTab === \"status\" ? \"#fff\" : \"inherit\",\n              backgroundColor: activeTab === \"status\" ? \"#1976d2\" : \"transparent\"\n            },\n            children: [\"Status\", activeTab === \"status\" && /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              sx: {\n                ml: 1\n              },\n              children: getConnectionStatus()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 717,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 704,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            orientation: \"vertical\",\n            flexItem: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 723,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: activeTab === \"alarms\" ? \"contained\" : \"text\",\n            onClick: () => setActiveTab(\"alarms\"),\n            sx: {\n              flex: 1,\n              py: 1.5,\n              borderRadius: 0,\n              color: activeTab === \"alarms\" ? \"#fff\" : \"inherit\",\n              backgroundColor: activeTab === \"alarms\" ? \"#1976d2\" : \"transparent\"\n            },\n            children: [\"Alarms\", activeTab === \"alarms\" && latestEntry && /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              sx: {\n                ml: 1\n              },\n              children: [latestEntry.openAlerts || 0, \" Open Alerts\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 738,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 725,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            orientation: \"vertical\",\n            flexItem: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 747,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: activeTab === \"cmd\" ? \"contained\" : \"text\",\n            onClick: () => setActiveTab(\"cmd\"),\n            sx: {\n              flex: 1,\n              py: 1.5,\n              borderRadius: 0,\n              color: activeTab === \"cmd\" ? \"#fff\" : \"inherit\",\n              backgroundColor: activeTab === \"cmd\" ? \"#1976d2\" : \"transparent\"\n            },\n            children: \"Command Center\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 749,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 695,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(Paper, {\n          sx: {\n            p: 2,\n            mt: 2,\n            bgcolor: 'error.light',\n            color: 'error.main',\n            borderRadius: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 775,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 766,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 3\n          },\n          children: [activeTab === \"status\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [renderDeviceMetrics(), renderCharts()]\n          }, void 0, true), activeTab === \"alarms\" && renderAlarmsTab(), activeTab === \"cmd\" && renderCommandCenterTab()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 780,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 640,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 638,\n    columnNumber: 5\n  }, this);\n};\n_s2(TelemetryDashboard, \"lwRNNsT80/zET+HTQPEoBZhI11Q=\", false, function () {\n  return [useTheme];\n});\n_c2 = TelemetryDashboard;\nexport default TelemetryDashboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"MetricCircle\");\n$RefreshReg$(_c2, \"TelemetryDashboard\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","getPlants","getDevices","getThresholdValue","updateThresholdValue","getLatestTelemetryEntry","getRealtimeTelemetryData","getTelemetryData","clearDeviceCache","Line","TextField","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","ArcElement","register","Container","Select","MenuItem","FormControl","InputLabel","Table","TableBody","TableCell","TableHead","TableRow","Paper","Box","Typography","CircularProgress","Button","Grid","Divider","TableContainer","Sidebar","useTheme","jsxDEV","_jsxDEV","Fragment","_Fragment","MetricCircle","value","label","color","size","thickness","_s","theme","displayValue","sx","display","flexDirection","alignItems","m","children","position","mb","variant","palette","primary","main","transform","strokeLinecap","fileName","_jsxFileName","lineNumber","columnNumber","top","left","bottom","right","justifyContent","component","fontWeight","_c","TelemetryDashboard","_s2","selectedConfigType","setSelectedConfigType","selectedCommandType","setSelectedCommandType","liveCommandValue","setLiveCommandValue","selectedMetric","setSelectedMetric","newThreshold","setNewThreshold","plants","setPlants","devices","setDevices","selectedPlant","setSelectedPlant","selectedDevice","setSelectedDevice","telemetryData","setTelemetryData","latestEntry","setLatestEntry","realtimeData","setRealtimeData","loading","setLoading","error","setError","activeTab","setActiveTab","connectionStatus","setConnectionStatus","chartOptions","responsive","maintainAspectRatio","scales","x","grid","y","beginAtZero","plugins","legend","fetchPlants","plantData","length","_id","console","fetchDevices","deviceData","fetchLatestEntry","data","log","normalized","alerts","Array","isArray","temperature","humidity","oilLevel","fetchRealtimeData","fetchHistoricalData","processedData","map","entry","_entry$temperature","_entry$oilLevel","timestamp","slice","fetchThreshold","threshold","toLowerCase","setCurrentThreshold","handleThresholdUpdate","isNaN","alert","success","Promise","all","then","latestInterval","setInterval","realtimeInterval","historicalInterval","clearInterval","handlePlantChange","e","target","debouncedLoading","setTimeout","handleDeviceChange","newDeviceId","getConnectionStatus","renderAlarmsTab","textAlign","py","openAlerts","renderCommandCenterTab","fullWidth","onChange","currentThreshold","test","setThreshold","onClick","response","fetch","method","headers","body","JSON","stringify","parseFloat","deviceId","metric","result","json","err","renderDeviceMetrics","_latestEntry$alerts","mt","flexWrap","Number","toFixed","temperatureChartData","labels","Date","toLocaleTimeString","datasets","borderColor","tension","oilLevelChartData","renderCharts","container","spacing","item","xs","md","p","height","options","index","toLocaleString","undefined","colSpan","align","maxWidth","ml","id","labelId","disabled","plant","plantName","device","deviceName","my","border","borderRadius","overflow","flex","backgroundColor","orientation","flexItem","bgcolor","_c2","$RefreshReg$"],"sources":["C:/Users/Garvisha/Desktop/New folder (2)/Front/oxygen-frontend/src/pages/TelemetryDashboard.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\nimport { getPlants } from \"../services/plantService\";\nimport { getDevices } from \"../services/deviceService\";\nimport { getThresholdValue, updateThresholdValue } from '../services/telemetryService';\n\nimport { \n  getLatestTelemetryEntry, \n  getRealtimeTelemetryData, \n  getTelemetryData,\n  clearDeviceCache \n} from \"../services/telemetryService\";\nimport { Line } from \"react-chartjs-2\";\nimport TextField from '@mui/material/TextField';\n\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n} from \"chart.js\";\n\nChartJS.register(\n  CategoryScale, \n  LinearScale, \n  PointElement, \n  LineElement, \n  Title, \n  Tooltip, \n  Legend,\n  ArcElement\n);\n\nimport {\n  Container,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Paper,\n  Box,\n  Typography,\n  CircularProgress,\n  Button,\n  Grid,\n  Divider,\n  TableContainer,\n} from \"@mui/material\";\n\nimport Sidebar from \"../components/Sidebar\";\nimport { useTheme } from '@mui/material/styles';\n\n// Custom circular progress visualization component that matches the reference UI\nconst MetricCircle = ({ value, label, color, size = 100, thickness = 5 }) => {\n  const theme = useTheme();\n  const displayValue = value || 0;\n  \n  return (\n    <Box sx={{ \n      display: 'flex', \n      flexDirection: 'column', \n      alignItems: 'center',\n      m: 2\n    }}>\n      <Box sx={{ \n        position: 'relative', \n        display: 'inline-flex',\n        mb: 1\n      }}>\n        <CircularProgress\n          variant=\"determinate\"\n          value={75} // Fixed angle for the visual style\n          size={size}\n          thickness={thickness}\n          sx={{ \n            color: color || theme.palette.primary.main,\n            transform: 'rotate(135deg)',\n            '& .MuiCircularProgress-circle': {\n              strokeLinecap: 'round',\n            }\n          }}\n        />\n        <Box\n          sx={{\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0,\n            position: 'absolute',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          <Typography variant=\"h5\" component=\"div\" fontWeight=\"bold\">\n            {displayValue}\n            {label === 'Temperature' ? '°C' : label === 'Humidity' || label === 'Oil Level' ? '%' : ''}\n          </Typography>\n        </Box>\n      </Box>\n      <Typography variant=\"body1\" component=\"div\">\n        {label}\n      </Typography>\n    </Box>\n  );\n};\n\nconst TelemetryDashboard = () => {\n  const [selectedConfigType, setSelectedConfigType] = useState('');\n  const [selectedCommandType, setSelectedCommandType] = useState(\"\");\n  const [liveCommandValue, setLiveCommandValue] = useState('');\n  const [selectedMetric, setSelectedMetric] = useState(null);\n\n  const [newThreshold, setNewThreshold] = useState('');\n  const theme = useTheme();\n  const [plants, setPlants] = useState([]);\n  const [devices, setDevices] = useState([]);\n  const [selectedPlant, setSelectedPlant] = useState(\"\");\n  const [selectedDevice, setSelectedDevice] = useState(\"esp32\");\n  const [telemetryData, setTelemetryData] = useState([]);\n  const [latestEntry, setLatestEntry] = useState(null);\n  const [realtimeData, setRealtimeData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState(\"status\");\n  const [connectionStatus, setConnectionStatus] = useState(\"disconnected\");\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        beginAtZero: true,\n        grid: {\n          color: '#f0f0f0'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      }\n    }\n  };\n\n  useEffect(() => {\n    const fetchPlants = async () => {\n      try {\n        setLoading(true);\n        const plantData = await getPlants();\n        setPlants(plantData);\n        if (plantData.length > 0) {\n          setSelectedPlant(plantData[0]._id);\n        }\n      } catch (error) {\n        console.error(\"❌ Error fetching plants:\", error);\n        setError(\"Failed to load plants. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPlants();\n  }, []); // Run only once on mount\n  \n\n  useEffect(() => {\n    const fetchDevices = async () => {\n      if (!selectedPlant) {\n        \n        return;\n      }\n     \n      try {\n        setLoading(true);\n        const deviceData = await getDevices(selectedPlant);\n        setDevices(deviceData);\n        if (deviceData.length > 0) {\n          setSelectedDevice(deviceData[0]._id); // Use deviceId\n        }\n      } catch (error) {\n        console.error(\"❌ Error fetching devices:\", error);\n        setError(\"Failed to load devices. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n  \n    fetchDevices();\n  }, [selectedPlant]); // Fetch devices when the plant selection changes\n  \n  const fetchLatestEntry = useCallback(async () => {\n    if (!selectedDevice) return;\n  \n    try {\n      const data = await getLatestTelemetryEntry(selectedDevice);\n      console.log(\"Latest telemetry entry:\", data);\n      if (data) {\n        // Properly normalize the data structure\n        const normalized = {\n          alerts: Array.isArray(data.alerts) ? data.alerts : [],\n          temperature: typeof data.temperature === 'object' ? \n            data.temperature.value : \n            typeof data.temperature === 'number' ? \n              data.temperature : 0,\n          humidity: typeof data.humidity === 'object' ? \n            data.humidity.value : \n            typeof data.humidity === 'number' ? \n              data.humidity : 0,\n          oilLevel: typeof data.oilLevel === 'object' ? \n            data.oilLevel.value : \n            typeof data.oilLevel === 'number' ? \n              data.oilLevel : 0\n        };\n\n        console.log(\"Normalized latest entry:\", normalized);\n      setLatestEntry(normalized);\n      setConnectionStatus(\"connected\");\n    } else {\n      setLatestEntry(null);\n      setConnectionStatus(\"no data\");\n    }\n  } catch (error) {\n    console.error(\"❌ Error fetching latest telemetry:\", error);\n    setLatestEntry(null);\n    setConnectionStatus(\"error\");\n  }\n}, [selectedDevice]);\n\n  const fetchRealtimeData = useCallback(async () => {\n    if (!selectedDevice) return;\n\n    try {\n      const data = await getRealtimeTelemetryData(selectedDevice);\n      \n        setRealtimeData(data);\n    } catch (error) {\n      console.error(\"❌ Error fetching realtime data:\", error);\n      setRealtimeData([]);\n    }\n  }, [selectedDevice]);\n  \n  const fetchHistoricalData = useCallback(async () => {\n    if (!selectedDevice) {\n      setTelemetryData([]);\n      return;\n    }\n   \n    try {\n      const data = await getTelemetryData(selectedDevice);\n      if (data?.length > 0) {\n        const processedData = data.map(entry => ({\n          ...entry,\n          temperature: entry.temperature?.value || entry.temperature || 0,\n          oilLevel: entry.oilLevel?.value || entry.oilLevel || 0,\n          timestamp: entry.timestamp\n        }));\n        \n        setTelemetryData(processedData.slice(0, 20));\n        setError(null);\n      }\n    } catch (error) {\n      console.error(\"❌ Error fetching historical data:\", error);\n      setError(\"Failed to fetch telemetry data.\");\n    }\n  }, [selectedDevice]);\n  \n  useEffect(() => {\n    const fetchThreshold = async () => {\n      if (selectedDevice && selectedConfigType) {\n        const threshold = await getThresholdValue(selectedDevice, selectedConfigType.toLowerCase());\n        setCurrentThreshold(threshold);\n      }\n    };\n    fetchThreshold();\n  }, [selectedDevice, selectedConfigType]);\n\n  const handleThresholdUpdate = async () => {\n    if (!newThreshold || isNaN(newThreshold)) return alert(\"Please enter a valid number\");\n    const success = await updateThresholdValue(selectedDevice, selectedConfigType.toLowerCase(), newThreshold);\n    if (success) {\n      alert(`${selectedConfigType} threshold updated successfully!`);\n      setCurrentThreshold(newThreshold);\n      setNewThreshold('');\n    } else {\n      alert(\"Failed to update threshold. Try again.\");\n    }\n  };\n  \n  useEffect(() => {\n    if (!selectedDevice) return;\n\n    // Initial data fetch - all at once\n    Promise.all([\n      fetchLatestEntry(),\n      fetchRealtimeData(),\n      fetchHistoricalData()\n    ]).then(() => {\n      setLoading(false);\n    });\n\n    // Optimize intervals for better UX:\n    // - Faster initial updates\n    // - Longer display time for readability\n    // - Staggered updates to prevent simultaneous fetches\n    const latestInterval = setInterval(fetchLatestEntry, 3000);    // Every 3 seconds\n    const realtimeInterval = setInterval(fetchRealtimeData, 5000); // Every 5 seconds\n    const historicalInterval = setInterval(fetchHistoricalData, 15000); // Every 15 seconds\n\n    return () => {\n      clearInterval(latestInterval);\n      clearInterval(realtimeInterval);\n      clearInterval(historicalInterval);\n    };\n  }, [selectedDevice, fetchLatestEntry, fetchRealtimeData, fetchHistoricalData]);\n  \n  const handlePlantChange = (e) => {\n    setSelectedPlant(e.target.value);\n    setSelectedDevice(\"\");\n    clearDeviceCache();\n  };\n  \n  const debouncedLoading = useCallback((value) => {\n    setTimeout(() => setLoading(value), value ? 0 : 300);\n  }, []);\n\n  const handleDeviceChange = (e) => {\n    const newDeviceId = e.target.value;\n    debouncedLoading(true);\n    setSelectedDevice(newDeviceId);\n    clearDeviceCache(newDeviceId);\n    \n    // Reset data states when device changes\n    setTelemetryData([]);\n    setRealtimeData([]);\n    setLatestEntry(null);\n    setError(null);\n  };\n  \n  const getConnectionStatus = () => {\n    switch (connectionStatus) {\n      case \"connected\": return \"Connected\";\n      case \"disconnected\": return \"Disconnected\";\n      case \"error\": return \"Connection Error\";\n      case \"no data\": return \"No data available\";\n      default: return \"Unknown\";\n    }\n  };\n  \n  const renderAlarmsTab = () => {\n    return (\n      <Box sx={{ textAlign: 'center', py: 2 }}>\n        {latestEntry ? (\n          <Typography variant=\"h6\">\n            {typeof latestEntry.openAlerts === 'object' \n              ? latestEntry.openAlerts.value || 0 \n              : latestEntry.openAlerts || 0} Open Alerts\n          </Typography>\n        ) : (\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            No alerts data available\n          </Typography>\n        )}\n      </Box>\n    );\n  };\n\n  // Render the command center tab content\n  const renderCommandCenterTab = () => (\n    <Box>\n  {/* Dropdown to choose metric */}\n  <FormControl fullWidth sx={{ mb: 2 }}>\n    <InputLabel>Select Metric</InputLabel>\n    <Select\n      value={selectedMetric}\n      onChange={(e) => setSelectedMetric(e.target.value)}\n      label=\"Select Metric\"\n    >\n      <MenuItem value=\"temperature\">Temperature</MenuItem>\n      <MenuItem value=\"humidity\">Humidity</MenuItem>\n      <MenuItem value=\"oilLevel\">Oil Level</MenuItem>\n    </Select>\n  </FormControl>\n\n  {/* Show current threshold */}\n  {currentThreshold !== null && (\n    <Box sx={{ mb: 2 }}>\n      <Typography variant=\"subtitle1\">\n        Current Threshold: <strong>{currentThreshold}</strong>\n      </Typography>\n    </Box>\n  )}\n\n  {/* Input to update threshold */}\n  <TextField\n    label=\"Enter Threshold\"\n    variant=\"outlined\"\n    fullWidth\n    value={threshold}\n    onChange={(e) => {\n      const value = e.target.value;\n      if (/^\\d*\\.?\\d*$/.test(value)) {\n        setThreshold(value); // Only numbers allowed\n      }\n    }}\n    sx={{ mb: 2 }}\n  />\n\n  {/* Update Config Button */}\n  <Button\n    variant=\"contained\"\n    fullWidth\n    onClick={async () => {\n      if (threshold === '') {\n        alert('Please enter a valid number');\n        return;\n      }\n\n      try {\n        const response = await fetch('http://10.178.20.127:3000/api/device/command', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            threshold: parseFloat(threshold),\n            deviceId: selectedDevice,\n            metric: selectedMetric\n          }),\n        });\n\n        const result = await response.json();\n        console.log('Threshold updated:', result);\n        setCurrentThreshold(threshold); // Save it in UI\n      } catch (err) {\n        console.error('Error updating threshold:', err);\n        alert('Failed to update config');\n      }\n    }}\n    sx={{ mb: 2 }}\n  >\n    Update Config\n  </Button>\n\n  {/* Restart Device Button */}\n  <Button\n    variant=\"outlined\"\n    color=\"error\"\n    fullWidth\n    onClick={() => {\n      setThreshold('');\n      setCurrentThreshold(null);\n    }}\n  >\n    Restart Device\n  </Button>\n</Box>\n  );\n  // Render device metrics in the status tab\n  const renderDeviceMetrics = () => {\n    if (!latestEntry) {\n      return (\n        <Box sx={{ textAlign: 'center', py: 3 }}>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            No telemetry data available for this device. Please check CosmosDB connection.\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 2 }}>\n            If this is a real device and data exists in CosmosDB, check that device IDs match between the frontend and database.\n          </Typography>\n        </Box>\n      );\n    }\n\n    //console.log(\"latestEntry:\", telemetryData);\n    return (\n      <Box sx={{ mt: 3 }}>\n        <Typography variant=\"h6\" fontWeight=\"bold\" mb={2}>\n          Device Metrics\n        </Typography>\n        <Box sx={{ \n          display: 'flex', \n          justifyContent: 'space-around', \n          flexWrap: 'wrap',\n          mb: 3 \n        }}>\n          <MetricCircle \n            value={latestEntry.alerts?.length || 0}\n            label=\"Open Alerts\" \n            color=\"#f44336\"\n          />\n          <MetricCircle \n            value={Number(latestEntry.temperature).toFixed(1)}\n            label=\"Temperature\" \n            color=\"#ff9800\"\n          />\n<MetricCircle \n          value={Number(latestEntry.humidity).toFixed(1)}\n          label=\"Humidity\" \n          color=\"#2196f3\"\n        />\n        <MetricCircle \n          value={Number(latestEntry.oilLevel).toFixed(1)}\n          label=\"Oil Level\" \n          color=\"#4caf50\"\n        />\n      </Box>\n    </Box>\n  );\n};\n\n\n  const temperatureChartData = {\n    labels: telemetryData?.map(entry => new Date(entry.timestamp).toLocaleTimeString()) || [],\n    datasets: [{\n      label: 'Temperature',\n      data: telemetryData?.map(entry => {\n        if (typeof entry.temperature === 'object') {\n          return entry.temperature.value || 0;\n        }\n        return entry.temperature || 0;\n      }) || [],\n      borderColor: '#ff9800',\n      tension: 0.1\n    }]\n  };\n  \n  const oilLevelChartData = {\n    labels: telemetryData?.map(entry => new Date(entry.timestamp).toLocaleTimeString()) || [],\n    datasets: [{\n      label: 'Oil Level',\n      data: telemetryData?.map(entry => {\n        if (typeof entry.oilLevel === 'object') {\n          return entry.oilLevel.value || 0;\n        }\n        return entry.oilLevel || 0;\n      }) || [],\n      borderColor: '#4caf50',\n      tension: 0.1\n    }]\n  };\n\n  // Update the table rendering section in renderCharts\n  const renderCharts = () => {\n    if (!selectedDevice || realtimeData.length === 0) {\n      return (\n        <Box sx={{ textAlign: 'center', py: 3, mt: 3 }}>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            No telemetry data available for this device in CosmosDB.\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n            Please select a device that has data stored in the CosmosDB container.\n          </Typography>\n        </Box>\n      );\n    }\n\n    return (\n      <>\n        <Grid container spacing={3} sx={{ mt: 2 }}>\n          <Grid item xs={12} md={6}>\n            <Typography variant=\"h6\" mb={1}>Temperature Over Time</Typography>\n            <Paper sx={{ p: 2, height: 250 }}>\n              <Line data={temperatureChartData} options={chartOptions} />\n            </Paper>\n          </Grid>\n          \n          <Grid item xs={12} md={6}>\n            <Typography variant=\"h6\" mb={1}>Oil Level Over Time</Typography>\n            <Paper sx={{ p: 2, height: 250 }}>\n              <Line data={oilLevelChartData} options={chartOptions} />\n            </Paper>\n          </Grid>\n        </Grid>\n\n        <Box sx={{ mt: 4 }}>\n          <Typography variant=\"h6\" mb={1}>Latest Readings</Typography>\n          <TableContainer component={Paper}>\n            <Table size=\"small\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>Timestamp</TableCell>\n                  <TableCell>Temperature (°C)</TableCell>\n                  <TableCell>Oil Level (%)</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {telemetryData.length > 0 ? (\n                  telemetryData.map((item, index) => (\n                    <TableRow key={index}>\n                      <TableCell>\n                        {new Date(item.timestamp).toLocaleString()}\n                      </TableCell>\n                      <TableCell>\n                        {typeof item.temperature === 'object' && item.temperature.value !== undefined\n                          ? item.temperature.value\n                          : typeof item.temperature === 'number'\n                          ? item.temperature\n                          : '0'}\n                      </TableCell>\n                      <TableCell>\n                        {typeof item.oilLevel === 'object' && item.oilLevel.value !== undefined\n                          ? item.oilLevel.value\n                          : typeof item.oilLevel === 'number'\n                          ? item.oilLevel\n                          : '0'}\n                      </TableCell>\n                    </TableRow>\n                  ))\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={3} align=\"center\">\n                      Waiting for real-time data...\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Box>\n      </>\n    );\n  };\n\n  return (\n    <Box sx={{ display: \"flex\" }}>\n      <Sidebar />\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4, ml: 4 }}>\n        <Typography variant=\"h4\" fontWeight=\"bold\" mb={3}>\n          Telemetry Dashboard\n        </Typography>\n        \n        {/* Plant and Device Selection */}\n        <Grid container spacing={2}>\n          <Grid item xs={12} md={6}>\n            <FormControl fullWidth sx={{ mb: 2 }}>\n              <InputLabel id=\"plant-select-label\">Select Plant</InputLabel>\n              <Select\n                labelId=\"plant-select-label\"\n                value={selectedPlant}\n                onChange={handlePlantChange}\n                label=\"Select Plant\"\n                disabled={loading}\n              >\n                {plants.map((plant) => (\n                  <MenuItem key={plant._id} value={plant._id}>\n                    {plant.plantName}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n          \n          <Grid item xs={12} md={6}>\n            <FormControl fullWidth sx={{ mb: 2 }} disabled={!selectedPlant || loading}>\n              <InputLabel id=\"device-select-label\">Select Device</InputLabel>\n              <Select\n                labelId=\"device-select-label\"\n                value={selectedDevice}\n                onChange={handleDeviceChange}\n                label=\"Select Device\"\n              >\n                {devices.map((device) => (\n                  <MenuItem key={device._id} value={device._id}>\n                    {device.deviceName}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n        </Grid>\n\n        {/* Loading indicator */}\n        {loading && (\n          <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>\n            <CircularProgress />\n          </Box>\n        )}\n        \n        {/* Tab navigation */}\n        {selectedDevice && !loading && (\n          <>\n            <Box \n              sx={{ \n                display: 'flex',\n                border: 1,\n                borderColor: 'divider',\n                borderRadius: 1,\n                overflow: 'hidden'\n              }}\n            >\n              <Button \n                variant={activeTab === \"status\" ? \"contained\" : \"text\"}\n                onClick={() => setActiveTab(\"status\")}\n                sx={{ \n                  flex: 1, \n                  py: 1.5,\n                  borderRadius: 0,\n                  color: activeTab === \"status\" ? \"#fff\" : \"inherit\",\n                  backgroundColor: activeTab === \"status\" ? \"#1976d2\" : \"transparent\"\n                }}\n              >\n                Status\n                {activeTab === \"status\" && (\n                  <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                    {getConnectionStatus()}\n                  </Typography>\n                )}\n              </Button>\n              \n              <Divider orientation=\"vertical\" flexItem />\n              \n              <Button \n                variant={activeTab === \"alarms\" ? \"contained\" : \"text\"}\n                onClick={() => setActiveTab(\"alarms\")}\n                sx={{ \n                  flex: 1, \n                  py: 1.5,\n                  borderRadius: 0,\n                  color: activeTab === \"alarms\" ? \"#fff\" : \"inherit\",\n                  backgroundColor: activeTab === \"alarms\" ? \"#1976d2\" : \"transparent\"\n                }}\n              >\n                Alarms\n                {activeTab === \"alarms\" && latestEntry && (\n                  <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                    {latestEntry.openAlerts || 0} Open Alerts\n                    \n              \n\n                  </Typography>\n                )}\n              </Button>\n              \n              <Divider orientation=\"vertical\" flexItem />\n              \n              <Button \n                variant={activeTab === \"cmd\" ? \"contained\" : \"text\"}\n                onClick={() => setActiveTab(\"cmd\")}\n                sx={{ \n                  flex: 1, \n                  py: 1.5,\n                  borderRadius: 0,\n                  color: activeTab === \"cmd\" ? \"#fff\" : \"inherit\",\n                  backgroundColor: activeTab === \"cmd\" ? \"#1976d2\" : \"transparent\"\n                }}\n              >\n                Command Center\n              </Button>\n            </Box>\n\n            {/* Error message */}\n            {error && (\n              <Paper \n                sx={{ \n                  p: 2, \n                  mt: 2, \n                  bgcolor: 'error.light', \n                  color: 'error.main',\n                  borderRadius: 1\n                }}\n              >\n                <Typography>{error}</Typography>\n              </Paper>\n            )}\n            \n            {/* Tab content */}\n            <Box sx={{ mt: 3 }}>\n              {activeTab === \"status\" && (\n                <>\n                  {renderDeviceMetrics()}\n                  {renderCharts()}\n                </>\n              )}\n              \n              {activeTab === \"alarms\" && renderAlarmsTab()}\n              \n              {activeTab === \"cmd\" && renderCommandCenterTab()}\n            </Box>\n          </>\n        )}\n      </Container>\n    </Box>\n  );\n};\n\nexport default TelemetryDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}