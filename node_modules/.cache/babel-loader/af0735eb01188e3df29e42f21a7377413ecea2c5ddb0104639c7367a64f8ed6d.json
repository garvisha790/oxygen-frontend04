{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Garvisha\\\\Desktop\\\\Front\\\\oxygen-frontend\\\\src\\\\pages\\\\TelemetryDashboard.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { getPlants } from \"../services/plantService\";\nimport { getDevices } from \"../services/deviceService\";\nimport { getLatestTelemetryEntry, getRealtimeTelemetryData, getTelemetryData, clearDeviceCache } from \"../services/telemetryService\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement } from \"chart.js\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement);\nimport { Container, Select, MenuItem, FormControl, InputLabel, Table, TableBody, TableCell, TableHead, TableRow, Paper, Box, Typography, CircularProgress, Button, Grid, Divider, TableContainer } from \"@mui/material\";\nimport Sidebar from \"../components/Sidebar\";\nimport { useTheme } from '@mui/material/styles';\n\n// Custom circular progress visualization component that matches the reference UI\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MetricCircle = ({\n  value,\n  label,\n  color,\n  size = 100,\n  thickness = 5\n}) => {\n  _s();\n  const theme = useTheme();\n  const displayValue = value || 0;\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      m: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        position: 'relative',\n        display: 'inline-flex',\n        mb: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n        variant: \"determinate\",\n        value: 75 // Fixed angle for the visual style\n        ,\n        size: size,\n        thickness: thickness,\n        sx: {\n          color: color || theme.palette.primary.main,\n          transform: 'rotate(135deg)',\n          '& .MuiCircularProgress-circle': {\n            strokeLinecap: 'round'\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n          position: 'absolute',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          component: \"div\",\n          fontWeight: \"bold\",\n          children: [displayValue, label === 'Temperature' ? '°C' : label === 'Humidity' || label === 'Oil Level' ? '%' : '']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      component: \"div\",\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(MetricCircle, \"VrMvFCCB9Haniz3VCRPNUiCauHs=\", false, function () {\n  return [useTheme];\n});\n_c = MetricCircle;\nconst TelemetryDashboard = () => {\n  _s2();\n  const theme = useTheme();\n  const [plants, setPlants] = useState([]);\n  const [devices, setDevices] = useState([]);\n  const [selectedPlant, setSelectedPlant] = useState(\"\");\n  const [selectedDevice, setSelectedDevice] = useState(\"esp32\");\n  const [telemetryData, setTelemetryData] = useState([]);\n  const [latestEntry, setLatestEntry] = useState(null);\n  const [realtimeData, setRealtimeData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState(\"status\");\n  const [connectionStatus, setConnectionStatus] = useState(\"disconnected\");\n  const [demoMode, setDemoMode] = useState(true);\n\n  // Fetch plants on component mount\n  useEffect(() => {\n    const fetchPlants = async () => {\n      try {\n        setLoading(true);\n        const plantData = await getPlants();\n        if (plantData && plantData.length > 0) {\n          setPlants(plantData);\n          // Auto-select first plant if none selected\n          if (!selectedPlant && plantData.length > 0) {\n            setSelectedPlant(plantData[0]._id);\n          }\n        }\n      } catch (error) {\n        console.error(\"❌ Error fetching plants:\", error);\n        setError(\"Failed to load plants. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPlants();\n  }, [selectedPlant]);\n\n  // Fetch devices when plant selection changes\n  useEffect(() => {\n    const fetchDevices = async () => {\n      if (!selectedPlant) {\n        setDevices([]);\n        setSelectedDevice(\"\");\n        return;\n      }\n      try {\n        setLoading(true);\n        const deviceData = await getDevices(selectedPlant);\n        if (deviceData && deviceData.length > 0) {\n          setDevices(deviceData);\n          // Auto-select first device if none selected\n          if (!selectedDevice && deviceData.length > 0) {\n            setSelectedDevice(deviceData[0]._id);\n          }\n        } else {\n          setDevices([]);\n          setSelectedDevice(\"\");\n        }\n      } catch (error) {\n        console.error(\"❌ Error fetching devices:\", error);\n        setError(\"Failed to load devices. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDevices();\n  }, [selectedPlant]);\n\n  // Fetch latest telemetry entry for dashboard metrics\n  const fetchLatestEntry = useCallback(async () => {\n    if (!selectedDevice) {\n      setLatestEntry(null);\n      setConnectionStatus(\"disconnected\");\n      return;\n    }\n    try {\n      // In demo mode, use hardcoded data with random variations\n      if (demoMode) {\n        const randomTemp = Math.floor(32 + Math.random() * 10);\n        const randomHumidity = Math.floor(45 + Math.random() * 15);\n        const randomOil = Math.floor(70 + Math.random() * 20);\n        const demoData = {\n          timestamp: new Date().toISOString(),\n          temperature: randomTemp,\n          humidity: randomHumidity,\n          oilLevel: randomOil,\n          openAlerts: Math.random() > 0.8 ? 1 : 0\n        };\n        setLatestEntry(demoData);\n        setConnectionStatus(\"connected\");\n        setError(null);\n        return;\n      }\n      const data = await getLatestTelemetryEntry(selectedDevice);\n      if (data) {\n        setLatestEntry(data);\n        setConnectionStatus(\"connected\");\n        setError(null);\n      } else {\n        setConnectionStatus(\"no data\");\n        setError(\"No telemetry data available for this device. Please check connection.\");\n      }\n    } catch (error) {\n      console.error(\"❌ Error fetching latest telemetry:\", error);\n      setConnectionStatus(\"error\");\n      setError(\"Failed to fetch telemetry data. Please try again.\");\n    }\n  }, [selectedDevice, demoMode]);\n\n  // Fetch realtime telemetry data for charts\n  const fetchRealtimeData = useCallback(async () => {\n    if (!selectedDevice) {\n      setRealtimeData([]);\n      return;\n    }\n    try {\n      // In demo mode, generate random time-series data\n      if (demoMode) {\n        const now = new Date();\n        const demoData = [];\n\n        // Generate 20 data points at 30 second intervals\n        for (let i = 0; i < 20; i++) {\n          const timestamp = new Date(now.getTime() - i * 30000).toISOString();\n          const randomTemp = Math.floor(30 + Math.random() * 15);\n          const randomOil = Math.floor(65 + Math.random() * 25);\n          demoData.push({\n            timestamp,\n            temperature: randomTemp,\n            oilLevel: randomOil\n          });\n        }\n\n        // Sort by timestamp, oldest to newest\n        demoData.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n        setRealtimeData(demoData);\n        setError(null);\n        return;\n      }\n      const data = await getRealtimeTelemetryData(selectedDevice);\n      if (data && data.length > 0) {\n        setRealtimeData(data);\n        setError(null);\n      }\n    } catch (error) {\n      console.error(\"❌ Error fetching realtime data:\", error);\n    }\n  }, [selectedDevice, demoMode]);\n\n  // Fetch historical telemetry data for tables\n  const fetchHistoricalData = useCallback(async () => {\n    if (!selectedDevice) {\n      setTelemetryData([]);\n      return;\n    }\n    try {\n      // In demo mode, generate random historical data\n      if (demoMode) {\n        const now = new Date();\n        const demoData = [];\n\n        // Generate 20 data points at 5 minute intervals\n        for (let i = 0; i < 20; i++) {\n          const timestamp = new Date(now.getTime() - i * 300000).toISOString();\n          const randomTemp = Math.floor(30 + Math.random() * 15);\n          const randomOil = Math.floor(65 + Math.random() * 25);\n          demoData.push({\n            timestamp,\n            temperature: randomTemp,\n            oilLevel: randomOil\n          });\n        }\n\n        // Sort by timestamp, newest to oldest\n        demoData.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n        setTelemetryData(demoData);\n        setError(null);\n        return;\n      }\n      const data = await getTelemetryData(selectedDevice);\n      if (data && data.length > 0) {\n        setTelemetryData(data.slice(-20)); // Last 20 entries\n        setError(null);\n      }\n    } catch (error) {\n      console.error(\"❌ Error fetching historical data:\", error);\n    }\n  }, [selectedDevice, demoMode]);\n\n  // Set up polling intervals when device changes\n  useEffect(() => {\n    if (!selectedDevice) return;\n\n    // Clear cache when switching devices\n    clearDeviceCache(selectedDevice);\n\n    // Initial fetches\n    fetchLatestEntry();\n    fetchRealtimeData();\n    fetchHistoricalData();\n\n    // Set up polling intervals\n    const latestInterval = setInterval(fetchLatestEntry, 2000);\n    const realtimeInterval = setInterval(fetchRealtimeData, 3000);\n    const historicalInterval = setInterval(fetchHistoricalData, 10000);\n\n    // Cleanup intervals on unmount or device change\n    return () => {\n      clearInterval(latestInterval);\n      clearInterval(realtimeInterval);\n      clearInterval(historicalInterval);\n    };\n  }, [selectedDevice, fetchLatestEntry, fetchRealtimeData, fetchHistoricalData]);\n\n  // Format data for temperature chart\n  const temperatureChartData = {\n    labels: realtimeData.map(data => new Date(data.timestamp).toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    })),\n    datasets: [{\n      label: \"Temperature (°C)\",\n      data: realtimeData.map(data => data.temperature),\n      borderColor: \"#ff6b8b\",\n      backgroundColor: \"rgba(255, 107, 139, 0.1)\",\n      borderWidth: 2,\n      pointRadius: 2,\n      tension: 0.3,\n      fill: false\n    }]\n  };\n\n  // Format data for oil level chart\n  const oilLevelChartData = {\n    labels: realtimeData.map(data => new Date(data.timestamp).toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    })),\n    datasets: [{\n      label: \"Oil Level (%)\",\n      data: realtimeData.map(data => data.oilLevel),\n      borderColor: \"#4dabf5\",\n      backgroundColor: \"rgba(77, 171, 245, 0.1)\",\n      borderWidth: 2,\n      pointRadius: 2,\n      tension: 0.3,\n      fill: false\n    }]\n  };\n\n  // Chart options for better appearance to match reference UI\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top',\n        labels: {\n          boxWidth: 10,\n          usePointStyle: true,\n          pointStyle: 'rect'\n        }\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false\n      }\n    },\n    scales: {\n      y: {\n        beginAtZero: false,\n        grid: {\n          display: true,\n          color: 'rgba(200, 200, 200, 0.1)'\n        },\n        ticks: {\n          font: {\n            size: 10\n          }\n        }\n      },\n      x: {\n        grid: {\n          display: false\n        },\n        ticks: {\n          maxRotation: 45,\n          minRotation: 45,\n          font: {\n            size: 10\n          }\n        }\n      }\n    },\n    animation: {\n      duration: 500\n    }\n  };\n\n  // Handlers for select changes\n  const handlePlantChange = e => {\n    const newPlantId = e.target.value;\n    setSelectedPlant(newPlantId);\n    setSelectedDevice(\"\");\n    clearDeviceCache(); // Clear all device cache when plant changes\n  };\n  const handleDeviceChange = e => {\n    const newDeviceId = e.target.value;\n    setSelectedDevice(newDeviceId);\n    clearDeviceCache(newDeviceId); // Clear cache for this specific device\n  };\n\n  // Render connection status indicator\n  const getConnectionStatus = () => {\n    if (connectionStatus === \"connected\") {\n      return \"Connected\";\n    } else if (connectionStatus === \"disconnected\") {\n      return \"Disconnected\";\n    } else if (connectionStatus === \"error\") {\n      return \"Connection Error\";\n    } else if (connectionStatus === \"no data\") {\n      return \"No data available\";\n    }\n    return \"Unknown\";\n  };\n\n  // Render the alarms tab content\n  const renderAlarmsTab = () => {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        textAlign: 'center',\n        py: 2\n      },\n      children: latestEntry ? /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: [latestEntry.openAlerts || 0, \" Open Alerts\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        color: \"text.secondary\",\n        children: \"No alerts data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 458,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render the command center tab content\n  const renderCommandCenterTab = () => {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        textAlign: 'center',\n        py: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        color: \"text.secondary\",\n        children: \"Command Center functionality coming soon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render device metrics in the status tab\n  const renderDeviceMetrics = () => {\n    if (!latestEntry) {\n      return /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          textAlign: 'center',\n          py: 3\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          color: \"text.secondary\",\n          children: \"No telemetry data available for this device. Please check connection.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        fontWeight: \"bold\",\n        mb: 2,\n        children: \"Device Metrics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-around',\n          flexWrap: 'wrap',\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(MetricCircle, {\n          value: latestEntry.openAlerts || 0,\n          label: \"Open Alerts\",\n          color: \"#f44336\" // red\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MetricCircle, {\n          value: latestEntry.temperature || 0,\n          label: \"Temperature\",\n          color: \"#ff9800\" // orange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MetricCircle, {\n          value: latestEntry.humidity || 0,\n          label: \"Humidity\",\n          color: \"#2196f3\" // blue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MetricCircle, {\n          value: latestEntry.oilLevel || 0,\n          label: \"Oil Level\",\n          color: \"#4caf50\" // green\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render charts section\n  const renderCharts = () => {\n    if (realtimeData.length === 0) return null;\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        sx: {\n          mt: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            mb: 1,\n            children: \"Temperature Over Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 539,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Paper, {\n            sx: {\n              p: 2,\n              height: 250\n            },\n            children: /*#__PURE__*/_jsxDEV(Line, {\n              data: temperatureChartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 541,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 540,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            mb: 1,\n            children: \"Oil Level Over Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 546,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Paper, {\n            sx: {\n              p: 2,\n              height: 250\n            },\n            children: /*#__PURE__*/_jsxDEV(Line, {\n              data: oilLevelChartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 548,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 547,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 4\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          mb: 1,\n          children: \"Latest Readings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n          component: Paper,\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            size: \"small\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Timestamp\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 559,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Temperature (\\xB0C)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 560,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Oil Level (%)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 561,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 558,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 557,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: telemetryData.length > 0 ? telemetryData.map((item, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: new Date(item.timestamp).toLocaleString([], {\n                    year: 'numeric',\n                    month: 'numeric',\n                    day: 'numeric',\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    second: '2-digit'\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 568,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: item.temperature\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 578,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: item.oilLevel\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 579,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 567,\n                columnNumber: 21\n              }, this)) : /*#__PURE__*/_jsxDEV(TableRow, {\n                children: /*#__PURE__*/_jsxDEV(TableCell, {\n                  colSpan: 3,\n                  align: \"center\",\n                  children: \"No data available\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 584,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 583,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 564,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 556,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 599,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      sx: {\n        mt: 4,\n        mb: 4,\n        ml: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        fontWeight: \"bold\",\n        mb: 3,\n        children: \"Telemetry Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"plant-select-label\",\n              children: \"Select Plant\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 609,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"plant-select-label\",\n              value: selectedPlant,\n              onChange: handlePlantChange,\n              label: \"Select Plant\",\n              disabled: loading,\n              children: plants.map(plant => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: plant._id,\n                children: plant.plantName\n              }, plant._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 618,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 610,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            sx: {\n              mb: 2\n            },\n            disabled: !selectedPlant || loading,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"device-select-label\",\n              children: \"Select Device\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 628,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"device-select-label\",\n              value: selectedDevice,\n              onChange: handleDeviceChange,\n              label: \"Select Device\",\n              children: devices.map(device => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: device._id,\n                children: device.deviceName\n              }, device._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 636,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 629,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 627,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mb: 2,\n          display: 'flex',\n          alignItems: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          sx: {\n            mr: 1\n          },\n          children: [\"Demo Mode: \", demoMode ? 'ON' : 'OFF']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 647,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          size: \"small\",\n          variant: \"outlined\",\n          onClick: () => setDemoMode(!demoMode),\n          color: demoMode ? \"success\" : \"primary\",\n          children: demoMode ? \"Using Demo Data\" : \"Use Real Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          sx: {\n            ml: 2\n          },\n          children: demoMode ? \"Using generated test data\" : \"Connecting to CosmosDB\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          my: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 11\n      }, this), selectedDevice && !loading && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            border: 1,\n            borderColor: 'divider',\n            borderRadius: 1,\n            overflow: 'hidden'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: activeTab === \"status\" ? \"contained\" : \"text\",\n            onClick: () => setActiveTab(\"status\"),\n            sx: {\n              flex: 1,\n              py: 1.5,\n              borderRadius: 0,\n              color: activeTab === \"status\" ? \"#fff\" : \"inherit\",\n              backgroundColor: activeTab === \"status\" ? \"#1976d2\" : \"transparent\"\n            },\n            children: [\"Status\", activeTab === \"status\" && /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              sx: {\n                ml: 1\n              },\n              children: getConnectionStatus()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 695,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 682,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            orientation: \"vertical\",\n            flexItem: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 701,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: activeTab === \"alarms\" ? \"contained\" : \"text\",\n            onClick: () => setActiveTab(\"alarms\"),\n            sx: {\n              flex: 1,\n              py: 1.5,\n              borderRadius: 0,\n              color: activeTab === \"alarms\" ? \"#fff\" : \"inherit\",\n              backgroundColor: activeTab === \"alarms\" ? \"#1976d2\" : \"transparent\"\n            },\n            children: [\"Alarms\", activeTab === \"alarms\" && latestEntry && /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              sx: {\n                ml: 1\n              },\n              children: [latestEntry.openAlerts || 0, \" Open Alerts\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 716,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 703,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            orientation: \"vertical\",\n            flexItem: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 722,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: activeTab === \"cmd\" ? \"contained\" : \"text\",\n            onClick: () => setActiveTab(\"cmd\"),\n            sx: {\n              flex: 1,\n              py: 1.5,\n              borderRadius: 0,\n              color: activeTab === \"cmd\" ? \"#fff\" : \"inherit\",\n              backgroundColor: activeTab === \"cmd\" ? \"#1976d2\" : \"transparent\"\n            },\n            children: \"Command Center\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 724,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 673,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(Paper, {\n          sx: {\n            p: 2,\n            mt: 2,\n            bgcolor: 'error.light',\n            color: 'error.main',\n            borderRadius: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 750,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 741,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 3\n          },\n          children: [activeTab === \"status\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [renderDeviceMetrics(), renderCharts()]\n          }, void 0, true), activeTab === \"alarms\" && renderAlarmsTab(), activeTab === \"cmd\" && renderCommandCenterTab()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 755,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 598,\n    columnNumber: 5\n  }, this);\n};\n_s2(TelemetryDashboard, \"R7bpWyHODYNnCgHOxSHth+FYXYo=\", false, function () {\n  return [useTheme];\n});\n_c2 = TelemetryDashboard;\nexport default TelemetryDashboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"MetricCircle\");\n$RefreshReg$(_c2, \"TelemetryDashboard\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","getPlants","getDevices","getLatestTelemetryEntry","getRealtimeTelemetryData","getTelemetryData","clearDeviceCache","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","ArcElement","register","Container","Select","MenuItem","FormControl","InputLabel","Table","TableBody","TableCell","TableHead","TableRow","Paper","Box","Typography","CircularProgress","Button","Grid","Divider","TableContainer","Sidebar","useTheme","jsxDEV","_jsxDEV","Fragment","_Fragment","MetricCircle","value","label","color","size","thickness","_s","theme","displayValue","sx","display","flexDirection","alignItems","m","children","position","mb","variant","palette","primary","main","transform","strokeLinecap","fileName","_jsxFileName","lineNumber","columnNumber","top","left","bottom","right","justifyContent","component","fontWeight","_c","TelemetryDashboard","_s2","plants","setPlants","devices","setDevices","selectedPlant","setSelectedPlant","selectedDevice","setSelectedDevice","telemetryData","setTelemetryData","latestEntry","setLatestEntry","realtimeData","setRealtimeData","loading","setLoading","error","setError","activeTab","setActiveTab","connectionStatus","setConnectionStatus","demoMode","setDemoMode","fetchPlants","plantData","length","_id","console","fetchDevices","deviceData","fetchLatestEntry","randomTemp","Math","floor","random","randomHumidity","randomOil","demoData","timestamp","Date","toISOString","temperature","humidity","oilLevel","openAlerts","data","fetchRealtimeData","now","i","getTime","push","sort","a","b","fetchHistoricalData","slice","latestInterval","setInterval","realtimeInterval","historicalInterval","clearInterval","temperatureChartData","labels","map","toLocaleTimeString","hour","minute","datasets","borderColor","backgroundColor","borderWidth","pointRadius","tension","fill","oilLevelChartData","chartOptions","responsive","maintainAspectRatio","plugins","legend","boxWidth","usePointStyle","pointStyle","tooltip","mode","intersect","scales","y","beginAtZero","grid","ticks","font","x","maxRotation","minRotation","animation","duration","handlePlantChange","e","newPlantId","target","handleDeviceChange","newDeviceId","getConnectionStatus","renderAlarmsTab","textAlign","py","renderCommandCenterTab","renderDeviceMetrics","mt","flexWrap","renderCharts","container","spacing","item","xs","md","p","height","options","index","toLocaleString","year","month","day","second","colSpan","align","maxWidth","ml","fullWidth","id","labelId","onChange","disabled","plant","plantName","device","deviceName","mr","onClick","my","border","borderRadius","overflow","flex","orientation","flexItem","bgcolor","_c2","$RefreshReg$"],"sources":["C:/Users/Garvisha/Desktop/Front/oxygen-frontend/src/pages/TelemetryDashboard.jsx"],"sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\nimport { getPlants } from \"../services/plantService\";\nimport { getDevices } from \"../services/deviceService\";\nimport { \n  getLatestTelemetryEntry, \n  getRealtimeTelemetryData, \n  getTelemetryData,\n  clearDeviceCache \n} from \"../services/telemetryService\";\nimport { Line } from \"react-chartjs-2\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n} from \"chart.js\";\n\nChartJS.register(\n  CategoryScale, \n  LinearScale, \n  PointElement, \n  LineElement, \n  Title, \n  Tooltip, \n  Legend,\n  ArcElement\n);\n\nimport {\n  Container,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Paper,\n  Box,\n  Typography,\n  CircularProgress,\n  Button,\n  Grid,\n  Divider,\n  TableContainer,\n} from \"@mui/material\";\n\nimport Sidebar from \"../components/Sidebar\";\nimport { useTheme } from '@mui/material/styles';\n\n// Custom circular progress visualization component that matches the reference UI\nconst MetricCircle = ({ value, label, color, size = 100, thickness = 5 }) => {\n  const theme = useTheme();\n  const displayValue = value || 0;\n  \n  return (\n    <Box sx={{ \n      display: 'flex', \n      flexDirection: 'column', \n      alignItems: 'center',\n      m: 2\n    }}>\n      <Box sx={{ \n        position: 'relative', \n        display: 'inline-flex',\n        mb: 1\n      }}>\n        <CircularProgress\n          variant=\"determinate\"\n          value={75} // Fixed angle for the visual style\n          size={size}\n          thickness={thickness}\n          sx={{ \n            color: color || theme.palette.primary.main,\n            transform: 'rotate(135deg)',\n            '& .MuiCircularProgress-circle': {\n              strokeLinecap: 'round',\n            }\n          }}\n        />\n        <Box\n          sx={{\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0,\n            position: 'absolute',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          <Typography variant=\"h5\" component=\"div\" fontWeight=\"bold\">\n            {displayValue}\n            {label === 'Temperature' ? '°C' : label === 'Humidity' || label === 'Oil Level' ? '%' : ''}\n          </Typography>\n        </Box>\n      </Box>\n      <Typography variant=\"body1\" component=\"div\">\n        {label}\n      </Typography>\n    </Box>\n  );\n};\n\nconst TelemetryDashboard = () => {\n  const theme = useTheme();\n  const [plants, setPlants] = useState([]);\n  const [devices, setDevices] = useState([]);\n  const [selectedPlant, setSelectedPlant] = useState(\"\");\n  const [selectedDevice, setSelectedDevice] = useState(\"esp32\");\n  const [telemetryData, setTelemetryData] = useState([]);\n  const [latestEntry, setLatestEntry] = useState(null);\n  const [realtimeData, setRealtimeData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState(\"status\");\n  const [connectionStatus, setConnectionStatus] = useState(\"disconnected\");\n  const [demoMode, setDemoMode] = useState(true);\n\n  // Fetch plants on component mount\n  useEffect(() => {\n    const fetchPlants = async () => {\n      try {\n        setLoading(true);\n        const plantData = await getPlants();\n        if (plantData && plantData.length > 0) {\n          setPlants(plantData);\n          // Auto-select first plant if none selected\n          if (!selectedPlant && plantData.length > 0) {\n            setSelectedPlant(plantData[0]._id);\n          }\n        }\n      } catch (error) {\n        console.error(\"❌ Error fetching plants:\", error);\n        setError(\"Failed to load plants. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPlants();\n  }, [selectedPlant]);\n\n  // Fetch devices when plant selection changes\n  useEffect(() => {\n    const fetchDevices = async () => {\n      if (!selectedPlant) {\n        setDevices([]);\n        setSelectedDevice(\"\");\n        return;\n      }\n      \n      try {\n        setLoading(true);\n        const deviceData = await getDevices(selectedPlant);\n        if (deviceData && deviceData.length > 0) {\n          setDevices(deviceData);\n          // Auto-select first device if none selected\n          if (!selectedDevice && deviceData.length > 0) {\n            setSelectedDevice(deviceData[0]._id);\n          }\n        } else {\n          setDevices([]);\n          setSelectedDevice(\"\");\n        }\n      } catch (error) {\n        console.error(\"❌ Error fetching devices:\", error);\n        setError(\"Failed to load devices. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchDevices();\n  }, [selectedPlant]);\n\n  // Fetch latest telemetry entry for dashboard metrics\n  const fetchLatestEntry = useCallback(async () => {\n    if (!selectedDevice) {\n      setLatestEntry(null);\n      setConnectionStatus(\"disconnected\");\n      return;\n    }\n    \n    try {\n      // In demo mode, use hardcoded data with random variations\n      if (demoMode) {\n        const randomTemp = Math.floor(32 + Math.random() * 10);\n        const randomHumidity = Math.floor(45 + Math.random() * 15);\n        const randomOil = Math.floor(70 + Math.random() * 20);\n        \n        const demoData = {\n          timestamp: new Date().toISOString(),\n          temperature: randomTemp,\n          humidity: randomHumidity,\n          oilLevel: randomOil,\n          openAlerts: Math.random() > 0.8 ? 1 : 0\n        };\n        \n        setLatestEntry(demoData);\n        setConnectionStatus(\"connected\");\n        setError(null);\n        return;\n      }\n      \n      const data = await getLatestTelemetryEntry(selectedDevice);\n      if (data) {\n        setLatestEntry(data);\n        setConnectionStatus(\"connected\");\n        setError(null);\n      } else {\n        setConnectionStatus(\"no data\");\n        setError(\"No telemetry data available for this device. Please check connection.\");\n      }\n    } catch (error) {\n      console.error(\"❌ Error fetching latest telemetry:\", error);\n      setConnectionStatus(\"error\");\n      setError(\"Failed to fetch telemetry data. Please try again.\");\n    }\n  }, [selectedDevice, demoMode]);\n\n  // Fetch realtime telemetry data for charts\n  const fetchRealtimeData = useCallback(async () => {\n    if (!selectedDevice) {\n      setRealtimeData([]);\n      return;\n    }\n    \n    try {\n      // In demo mode, generate random time-series data\n      if (demoMode) {\n        const now = new Date();\n        const demoData = [];\n        \n        // Generate 20 data points at 30 second intervals\n        for (let i = 0; i < 20; i++) {\n          const timestamp = new Date(now.getTime() - (i * 30000)).toISOString();\n          const randomTemp = Math.floor(30 + Math.random() * 15);\n          const randomOil = Math.floor(65 + Math.random() * 25);\n          \n          demoData.push({\n            timestamp,\n            temperature: randomTemp,\n            oilLevel: randomOil\n          });\n        }\n        \n        // Sort by timestamp, oldest to newest\n        demoData.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n        setRealtimeData(demoData);\n        setError(null);\n        return;\n      }\n      \n      const data = await getRealtimeTelemetryData(selectedDevice);\n      if (data && data.length > 0) {\n        setRealtimeData(data);\n        setError(null);\n      }\n    } catch (error) {\n      console.error(\"❌ Error fetching realtime data:\", error);\n    }\n  }, [selectedDevice, demoMode]);\n\n  // Fetch historical telemetry data for tables\n  const fetchHistoricalData = useCallback(async () => {\n    if (!selectedDevice) {\n      setTelemetryData([]);\n      return;\n    }\n    \n    try {\n      // In demo mode, generate random historical data\n      if (demoMode) {\n        const now = new Date();\n        const demoData = [];\n        \n        // Generate 20 data points at 5 minute intervals\n        for (let i = 0; i < 20; i++) {\n          const timestamp = new Date(now.getTime() - (i * 300000)).toISOString();\n          const randomTemp = Math.floor(30 + Math.random() * 15);\n          const randomOil = Math.floor(65 + Math.random() * 25);\n          \n          demoData.push({\n            timestamp,\n            temperature: randomTemp,\n            oilLevel: randomOil\n          });\n        }\n        \n        // Sort by timestamp, newest to oldest\n        demoData.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n        setTelemetryData(demoData);\n        setError(null);\n        return;\n      }\n      \n      const data = await getTelemetryData(selectedDevice);\n      if (data && data.length > 0) {\n        setTelemetryData(data.slice(-20)); // Last 20 entries\n        setError(null);\n      }\n    } catch (error) {\n      console.error(\"❌ Error fetching historical data:\", error);\n    }\n  }, [selectedDevice, demoMode]);\n\n  // Set up polling intervals when device changes\n  useEffect(() => {\n    if (!selectedDevice) return;\n    \n    // Clear cache when switching devices\n    clearDeviceCache(selectedDevice);\n    \n    // Initial fetches\n    fetchLatestEntry();\n    fetchRealtimeData();\n    fetchHistoricalData();\n    \n    // Set up polling intervals\n    const latestInterval = setInterval(fetchLatestEntry, 2000);\n    const realtimeInterval = setInterval(fetchRealtimeData, 3000);\n    const historicalInterval = setInterval(fetchHistoricalData, 10000);\n    \n    // Cleanup intervals on unmount or device change\n    return () => {\n      clearInterval(latestInterval);\n      clearInterval(realtimeInterval);\n      clearInterval(historicalInterval);\n    };\n  }, [selectedDevice, fetchLatestEntry, fetchRealtimeData, fetchHistoricalData]);\n\n  // Format data for temperature chart\n  const temperatureChartData = {\n    labels: realtimeData.map((data) => \n      new Date(data.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})\n    ),\n    datasets: [\n      {\n        label: \"Temperature (°C)\",\n        data: realtimeData.map((data) => data.temperature),\n        borderColor: \"#ff6b8b\",\n        backgroundColor: \"rgba(255, 107, 139, 0.1)\",\n        borderWidth: 2,\n        pointRadius: 2,\n        tension: 0.3,\n        fill: false,\n      },\n    ],\n  };\n\n  // Format data for oil level chart\n  const oilLevelChartData = {\n    labels: realtimeData.map((data) => \n      new Date(data.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})\n    ),\n    datasets: [\n      {\n        label: \"Oil Level (%)\",\n        data: realtimeData.map((data) => data.oilLevel),\n        borderColor: \"#4dabf5\",\n        backgroundColor: \"rgba(77, 171, 245, 0.1)\",\n        borderWidth: 2,\n        pointRadius: 2,\n        tension: 0.3,\n        fill: false,\n      },\n    ],\n  };\n\n  // Chart options for better appearance to match reference UI\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top',\n        labels: {\n          boxWidth: 10,\n          usePointStyle: true,\n          pointStyle: 'rect'\n        }\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n      },\n    },\n    scales: {\n      y: {\n        beginAtZero: false,\n        grid: {\n          display: true,\n          color: 'rgba(200, 200, 200, 0.1)',\n        },\n        ticks: {\n          font: {\n            size: 10\n          }\n        }\n      },\n      x: {\n        grid: {\n          display: false,\n        },\n        ticks: {\n          maxRotation: 45,\n          minRotation: 45,\n          font: {\n            size: 10\n          }\n        }\n      },\n    },\n    animation: {\n      duration: 500,\n    },\n  };\n\n  // Handlers for select changes\n  const handlePlantChange = (e) => {\n    const newPlantId = e.target.value;\n    setSelectedPlant(newPlantId);\n    setSelectedDevice(\"\");\n    clearDeviceCache(); // Clear all device cache when plant changes\n  };\n\n  const handleDeviceChange = (e) => {\n    const newDeviceId = e.target.value;\n    setSelectedDevice(newDeviceId);\n    clearDeviceCache(newDeviceId); // Clear cache for this specific device\n  };\n\n  // Render connection status indicator\n  const getConnectionStatus = () => {\n    if (connectionStatus === \"connected\") {\n      return \"Connected\";\n    } else if (connectionStatus === \"disconnected\") {\n      return \"Disconnected\";\n    } else if (connectionStatus === \"error\") {\n      return \"Connection Error\";\n    } else if (connectionStatus === \"no data\") {\n      return \"No data available\";\n    }\n    return \"Unknown\";\n  };\n\n  // Render the alarms tab content\n  const renderAlarmsTab = () => {\n    return (\n      <Box sx={{ textAlign: 'center', py: 2 }}>\n        {latestEntry ? (\n          <Typography variant=\"h6\">\n            {latestEntry.openAlerts || 0} Open Alerts\n          </Typography>\n        ) : (\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            No alerts data available\n          </Typography>\n        )}\n      </Box>\n    );\n  };\n\n  // Render the command center tab content\n  const renderCommandCenterTab = () => {\n    return (\n      <Box sx={{ textAlign: 'center', py: 2 }}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          Command Center functionality coming soon\n        </Typography>\n      </Box>\n    );\n  };\n\n  // Render device metrics in the status tab\n  const renderDeviceMetrics = () => {\n    if (!latestEntry) {\n      return (\n        <Box sx={{ textAlign: 'center', py: 3 }}>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            No telemetry data available for this device. Please check connection.\n          </Typography>\n        </Box>\n      );\n    }\n\n    return (\n      <Box sx={{ mt: 3 }}>\n        <Typography variant=\"h6\" fontWeight=\"bold\" mb={2}>\n          Device Metrics\n        </Typography>\n        <Box sx={{ \n          display: 'flex', \n          justifyContent: 'space-around', \n          flexWrap: 'wrap',\n          mb: 3 \n        }}>\n          <MetricCircle \n            value={latestEntry.openAlerts || 0} \n            label=\"Open Alerts\" \n            color=\"#f44336\" // red\n          />\n          <MetricCircle \n            value={latestEntry.temperature || 0} \n            label=\"Temperature\" \n            color=\"#ff9800\" // orange\n          />\n          <MetricCircle \n            value={latestEntry.humidity || 0} \n            label=\"Humidity\" \n            color=\"#2196f3\" // blue\n          />\n          <MetricCircle \n            value={latestEntry.oilLevel || 0} \n            label=\"Oil Level\" \n            color=\"#4caf50\" // green\n          />\n        </Box>\n      </Box>\n    );\n  };\n\n  // Render charts section\n  const renderCharts = () => {\n    if (realtimeData.length === 0) return null;\n\n    return (\n      <>\n        <Grid container spacing={3} sx={{ mt: 2 }}>\n          <Grid item xs={12} md={6}>\n            <Typography variant=\"h6\" mb={1}>Temperature Over Time</Typography>\n            <Paper sx={{ p: 2, height: 250 }}>\n              <Line data={temperatureChartData} options={chartOptions} />\n            </Paper>\n          </Grid>\n          \n          <Grid item xs={12} md={6}>\n            <Typography variant=\"h6\" mb={1}>Oil Level Over Time</Typography>\n            <Paper sx={{ p: 2, height: 250 }}>\n              <Line data={oilLevelChartData} options={chartOptions} />\n            </Paper>\n          </Grid>\n        </Grid>\n\n        <Box sx={{ mt: 4 }}>\n          <Typography variant=\"h6\" mb={1}>Latest Readings</Typography>\n          <TableContainer component={Paper}>\n            <Table size=\"small\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>Timestamp</TableCell>\n                  <TableCell>Temperature (°C)</TableCell>\n                  <TableCell>Oil Level (%)</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {telemetryData.length > 0 ? (\n                  telemetryData.map((item, index) => (\n                    <TableRow key={index}>\n                      <TableCell>\n                        {new Date(item.timestamp).toLocaleString([], {\n                          year: 'numeric',\n                          month: 'numeric',\n                          day: 'numeric',\n                          hour: '2-digit',\n                          minute: '2-digit',\n                          second: '2-digit'\n                        })}\n                      </TableCell>\n                      <TableCell>{item.temperature}</TableCell>\n                      <TableCell>{item.oilLevel}</TableCell>\n                    </TableRow>\n                  ))\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={3} align=\"center\">\n                      No data available\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Box>\n      </>\n    );\n  };\n\n  return (\n    <Box sx={{ display: \"flex\" }}>\n      <Sidebar />\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4, ml: 4 }}>\n        <Typography variant=\"h4\" fontWeight=\"bold\" mb={3}>\n          Telemetry Dashboard\n        </Typography>\n        \n        {/* Plant and Device Selection */}\n        <Grid container spacing={2}>\n          <Grid item xs={12} md={6}>\n            <FormControl fullWidth sx={{ mb: 2 }}>\n              <InputLabel id=\"plant-select-label\">Select Plant</InputLabel>\n              <Select\n                labelId=\"plant-select-label\"\n                value={selectedPlant}\n                onChange={handlePlantChange}\n                label=\"Select Plant\"\n                disabled={loading}\n              >\n                {plants.map((plant) => (\n                  <MenuItem key={plant._id} value={plant._id}>\n                    {plant.plantName}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n          \n          <Grid item xs={12} md={6}>\n            <FormControl fullWidth sx={{ mb: 2 }} disabled={!selectedPlant || loading}>\n              <InputLabel id=\"device-select-label\">Select Device</InputLabel>\n              <Select\n                labelId=\"device-select-label\"\n                value={selectedDevice}\n                onChange={handleDeviceChange}\n                label=\"Select Device\"\n              >\n                {devices.map((device) => (\n                  <MenuItem key={device._id} value={device._id}>\n                    {device.deviceName}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n        </Grid>\n\n        {/* Demo mode toggle */}\n        <Box sx={{ mb: 2, display: 'flex', alignItems: 'center' }}>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mr: 1 }}>\n            Demo Mode: {demoMode ? 'ON' : 'OFF'}\n          </Typography>\n          <Button \n            size=\"small\" \n            variant=\"outlined\" \n            onClick={() => setDemoMode(!demoMode)}\n            color={demoMode ? \"success\" : \"primary\"}\n          >\n            {demoMode ? \"Using Demo Data\" : \"Use Real Data\"}\n          </Button>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ ml: 2 }}>\n            {demoMode ? \"Using generated test data\" : \"Connecting to CosmosDB\"}\n          </Typography>\n        </Box>\n\n        {/* Loading indicator */}\n        {loading && (\n          <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>\n            <CircularProgress />\n          </Box>\n        )}\n\n        {/* Tab navigation */}\n        {selectedDevice && !loading && (\n          <>\n            <Box \n              sx={{ \n                display: 'flex',\n                border: 1,\n                borderColor: 'divider',\n                borderRadius: 1,\n                overflow: 'hidden'\n              }}\n            >\n              <Button \n                variant={activeTab === \"status\" ? \"contained\" : \"text\"}\n                onClick={() => setActiveTab(\"status\")}\n                sx={{ \n                  flex: 1, \n                  py: 1.5,\n                  borderRadius: 0,\n                  color: activeTab === \"status\" ? \"#fff\" : \"inherit\",\n                  backgroundColor: activeTab === \"status\" ? \"#1976d2\" : \"transparent\"\n                }}\n              >\n                Status\n                {activeTab === \"status\" && (\n                  <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                    {getConnectionStatus()}\n                  </Typography>\n                )}\n              </Button>\n              \n              <Divider orientation=\"vertical\" flexItem />\n              \n              <Button \n                variant={activeTab === \"alarms\" ? \"contained\" : \"text\"}\n                onClick={() => setActiveTab(\"alarms\")}\n                sx={{ \n                  flex: 1, \n                  py: 1.5,\n                  borderRadius: 0,\n                  color: activeTab === \"alarms\" ? \"#fff\" : \"inherit\",\n                  backgroundColor: activeTab === \"alarms\" ? \"#1976d2\" : \"transparent\"\n                }}\n              >\n                Alarms\n                {activeTab === \"alarms\" && latestEntry && (\n                  <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                    {latestEntry.openAlerts || 0} Open Alerts\n                  </Typography>\n                )}\n              </Button>\n              \n              <Divider orientation=\"vertical\" flexItem />\n              \n              <Button \n                variant={activeTab === \"cmd\" ? \"contained\" : \"text\"}\n                onClick={() => setActiveTab(\"cmd\")}\n                sx={{ \n                  flex: 1, \n                  py: 1.5,\n                  borderRadius: 0,\n                  color: activeTab === \"cmd\" ? \"#fff\" : \"inherit\",\n                  backgroundColor: activeTab === \"cmd\" ? \"#1976d2\" : \"transparent\"\n                }}\n              >\n                Command Center\n              </Button>\n            </Box>\n\n            {/* Error message */}\n            {error && (\n              <Paper \n                sx={{ \n                  p: 2, \n                  mt: 2, \n                  bgcolor: 'error.light', \n                  color: 'error.main',\n                  borderRadius: 1\n                }}\n              >\n                <Typography>{error}</Typography>\n              </Paper>\n            )}\n            \n            {/* Tab content */}\n            <Box sx={{ mt: 3 }}>\n              {activeTab === \"status\" && (\n                <>\n                  {renderDeviceMetrics()}\n                  {renderCharts()}\n                </>\n              )}\n              \n              {activeTab === \"alarms\" && renderAlarmsTab()}\n              \n              {activeTab === \"cmd\" && renderCommandCenterTab()}\n            </Box>\n          </>\n        )}\n      </Container>\n    </Box>\n  );\n};\n\nexport default TelemetryDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}