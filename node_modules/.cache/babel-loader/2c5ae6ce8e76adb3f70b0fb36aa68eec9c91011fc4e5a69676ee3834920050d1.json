{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Garvisha\\\\Desktop\\\\New folder (2)\\\\Front\\\\oxygen-frontend\\\\src\\\\pages\\\\TelemetryDashboard.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { getPlants } from \"../services/plantService\";\nimport { getDevices } from \"../services/deviceService\";\nimport { getLatestTelemetryEntry, getRealtimeTelemetryData, getTelemetryData, clearDeviceCache } from \"../services/telemetryService\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement } from \"chart.js\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement);\nimport { Container, Select, MenuItem, FormControl, InputLabel, Table, TableBody, TableCell, TableHead, TableRow, Paper, Box, Typography, CircularProgress, Button, Grid, Divider, TableContainer } from \"@mui/material\";\nimport Sidebar from \"../components/Sidebar\";\nimport { useTheme } from '@mui/material/styles';\n\n// Custom circular progress visualization component that matches the reference UI\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MetricCircle = ({\n  value,\n  label,\n  color,\n  size = 100,\n  thickness = 5\n}) => {\n  _s();\n  const theme = useTheme();\n  const displayValue = value || 0;\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      m: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        position: 'relative',\n        display: 'inline-flex',\n        mb: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n        variant: \"determinate\",\n        value: 75 // Fixed angle for the visual style\n        ,\n        size: size,\n        thickness: thickness,\n        sx: {\n          color: color || theme.palette.primary.main,\n          transform: 'rotate(135deg)',\n          '& .MuiCircularProgress-circle': {\n            strokeLinecap: 'round'\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n          position: 'absolute',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          component: \"div\",\n          fontWeight: \"bold\",\n          children: [displayValue, label === 'Temperature' ? '°C' : label === 'Humidity' || label === 'Oil Level' ? '%' : '']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      component: \"div\",\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(MetricCircle, \"VrMvFCCB9Haniz3VCRPNUiCauHs=\", false, function () {\n  return [useTheme];\n});\n_c = MetricCircle;\nconst TelemetryDashboard = () => {\n  _s2();\n  const theme = useTheme();\n  const [plants, setPlants] = useState([]);\n  const [devices, setDevices] = useState([]);\n  const [selectedPlant, setSelectedPlant] = useState(\"\");\n  const [selectedDevice, setSelectedDevice] = useState(\"esp32\");\n  const [telemetryData, setTelemetryData] = useState([]);\n  const [latestEntry, setLatestEntry] = useState(null);\n  const [realtimeData, setRealtimeData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState(\"status\");\n  const [connectionStatus, setConnectionStatus] = useState(\"disconnected\");\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        beginAtZero: true,\n        grid: {\n          color: '#f0f0f0'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      }\n    }\n  };\n  useEffect(() => {\n    const fetchPlants = async () => {\n      try {\n        setLoading(true);\n        const plantData = await getPlants();\n        setPlants(plantData);\n        if (plantData.length > 0) {\n          setSelectedPlant(plantData[0]._id);\n        }\n      } catch (error) {\n        console.error(\"❌ Error fetching plants:\", error);\n        setError(\"Failed to load plants. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPlants();\n  }, []); // Run only once on mount\n\n  useEffect(() => {\n    const fetchDevices = async () => {\n      if (!selectedPlant) {\n        return;\n      }\n      try {\n        setLoading(true);\n        const deviceData = await getDevices(selectedPlant);\n        setDevices(deviceData);\n        if (deviceData.length > 0) {\n          setSelectedDevice(deviceData[0]._id); // Use deviceId\n        }\n      } catch (error) {\n        console.error(\"❌ Error fetching devices:\", error);\n        setError(\"Failed to load devices. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDevices();\n  }, [selectedPlant]); // Fetch devices when the plant selection changes\n\n  const fetchLatestEntry = useCallback(async () => {\n    if (!selectedDevice) return;\n    try {\n      var _ref, _data$temperature$val, _data$temperature, _ref2, _data$humidity$value, _data$humidity, _ref3, _data$oilLevel$value, _data$oilLevel, _ref4, _data$openAlerts$valu, _data$openAlerts;\n      const data = await getLatestTelemetryEntry(selectedDevice);\n\n      // Normalize fields like temperature, humidity, etc.\n      const normalized = {\n        ...data,\n        temperature: (_ref = (_data$temperature$val = data === null || data === void 0 ? void 0 : (_data$temperature = data.temperature) === null || _data$temperature === void 0 ? void 0 : _data$temperature.value) !== null && _data$temperature$val !== void 0 ? _data$temperature$val : data === null || data === void 0 ? void 0 : data.temperature) !== null && _ref !== void 0 ? _ref : 0,\n        humidity: (_ref2 = (_data$humidity$value = data === null || data === void 0 ? void 0 : (_data$humidity = data.humidity) === null || _data$humidity === void 0 ? void 0 : _data$humidity.value) !== null && _data$humidity$value !== void 0 ? _data$humidity$value : data === null || data === void 0 ? void 0 : data.humidity) !== null && _ref2 !== void 0 ? _ref2 : 0,\n        oilLevel: (_ref3 = (_data$oilLevel$value = data === null || data === void 0 ? void 0 : (_data$oilLevel = data.oilLevel) === null || _data$oilLevel === void 0 ? void 0 : _data$oilLevel.value) !== null && _data$oilLevel$value !== void 0 ? _data$oilLevel$value : data === null || data === void 0 ? void 0 : data.oilLevel) !== null && _ref3 !== void 0 ? _ref3 : 0,\n        openAlerts: Array.isArray(data === null || data === void 0 ? void 0 : data.alerts) ? data.alerts.length : (_ref4 = (_data$openAlerts$valu = data === null || data === void 0 ? void 0 : (_data$openAlerts = data.openAlerts) === null || _data$openAlerts === void 0 ? void 0 : _data$openAlerts.value) !== null && _data$openAlerts$valu !== void 0 ? _data$openAlerts$valu : data === null || data === void 0 ? void 0 : data.openAlerts) !== null && _ref4 !== void 0 ? _ref4 : 0\n      };\n      setLatestEntry(normalized);\n    } catch (error) {\n      console.error(\"❌ Error fetching latest telemetry:\", error);\n      setError(\"Failed to fetch latest telemetry data.\");\n    }\n  }, [selectedDevice]);\n  const fetchRealtimeData = useCallback(async () => {\n    if (!selectedDevice) return;\n    try {\n      const data = await getRealtimeTelemetryData(selectedDevice);\n      setRealtimeData(data);\n    } catch (error) {\n      console.error(\"❌ Error fetching realtime data:\", error);\n      setRealtimeData([]);\n    }\n  }, [selectedDevice]);\n  const fetchHistoricalData = useCallback(async () => {\n    if (!selectedDevice) {\n      setTelemetryData([]);\n      return;\n    }\n    try {\n      const data = await getTelemetryData(selectedDevice);\n      if ((data === null || data === void 0 ? void 0 : data.length) > 0) {\n        const processedData = data.map(entry => {\n          var _entry$temperature, _entry$oilLevel;\n          return {\n            ...entry,\n            temperature: ((_entry$temperature = entry.temperature) === null || _entry$temperature === void 0 ? void 0 : _entry$temperature.value) || entry.temperature || 0,\n            oilLevel: ((_entry$oilLevel = entry.oilLevel) === null || _entry$oilLevel === void 0 ? void 0 : _entry$oilLevel.value) || entry.oilLevel || 0,\n            timestamp: entry.timestamp\n          };\n        });\n        setTelemetryData(processedData.slice(0, 20));\n        setError(null);\n      }\n    } catch (error) {\n      console.error(\"❌ Error fetching historical data:\", error);\n      setError(\"Failed to fetch telemetry data.\");\n    }\n  }, [selectedDevice]);\n  useEffect(() => {\n    if (!selectedDevice) return;\n\n    // Initial data fetch - all at once\n    Promise.all([fetchLatestEntry(), fetchRealtimeData(), fetchHistoricalData()]).then(() => {\n      setLoading(false);\n    });\n\n    // Optimize intervals for better UX:\n    // - Faster initial updates\n    // - Longer display time for readability\n    // - Staggered updates to prevent simultaneous fetches\n    const latestInterval = setInterval(fetchLatestEntry, 3000); // Every 3 seconds\n    const realtimeInterval = setInterval(fetchRealtimeData, 5000); // Every 5 seconds\n    const historicalInterval = setInterval(fetchHistoricalData, 15000); // Every 15 seconds\n\n    return () => {\n      clearInterval(latestInterval);\n      clearInterval(realtimeInterval);\n      clearInterval(historicalInterval);\n    };\n  }, [selectedDevice, fetchLatestEntry, fetchRealtimeData, fetchHistoricalData]);\n  const handlePlantChange = e => {\n    setSelectedPlant(e.target.value);\n    setSelectedDevice(\"\");\n    clearDeviceCache();\n  };\n  const debouncedLoading = useCallback(value => {\n    setTimeout(() => setLoading(value), value ? 0 : 300);\n  }, []);\n  const handleDeviceChange = e => {\n    const newDeviceId = e.target.value;\n    debouncedLoading(true);\n    setSelectedDevice(newDeviceId);\n    clearDeviceCache(newDeviceId);\n\n    // Reset data states when device changes\n    setTelemetryData([]);\n    setRealtimeData([]);\n    setLatestEntry(null);\n    setError(null);\n  };\n  const getConnectionStatus = () => {\n    switch (connectionStatus) {\n      case \"connected\":\n        return \"Connected\";\n      case \"disconnected\":\n        return \"Disconnected\";\n      case \"error\":\n        return \"Connection Error\";\n      case \"no data\":\n        return \"No data available\";\n      default:\n        return \"Unknown\";\n    }\n  };\n  const renderAlarmsTab = () => {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        textAlign: 'center',\n        py: 2\n      },\n      children: latestEntry ? /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: [typeof latestEntry.openAlerts === 'object' ? latestEntry.openAlerts.value || 0 : latestEntry.openAlerts || 0, \" Open Alerts\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        color: \"text.secondary\",\n        children: \"No alerts data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render the command center tab content\n  const renderCommandCenterTab = () => {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        textAlign: 'center',\n        py: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        color: \"text.secondary\",\n        children: \"Command Center functionality coming soon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render device metrics in the status tab\n  const renderDeviceMetrics = () => {\n    var _ref5, _latestEntry$openAler, _latestEntry$openAler2, _ref6, _latestEntry$temperat, _latestEntry$temperat2, _ref7, _latestEntry$humidity, _latestEntry$humidity2, _ref8, _latestEntry$oilLevel, _latestEntry$oilLevel2;\n    if (!latestEntry) {\n      return /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          textAlign: 'center',\n          py: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          color: \"text.secondary\",\n          children: \"No telemetry data available for this device. Please check CosmosDB connection.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 347,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          sx: {\n            mt: 2\n          },\n          children: \"If this is a real device and data exists in CosmosDB, check that device IDs match between the frontend and database.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        fontWeight: \"bold\",\n        mb: 2,\n        children: \"Device Metrics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-around',\n          flexWrap: 'wrap',\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(MetricCircle, {\n          value: (_ref5 = (_latestEntry$openAler = latestEntry === null || latestEntry === void 0 ? void 0 : (_latestEntry$openAler2 = latestEntry.openAlerts) === null || _latestEntry$openAler2 === void 0 ? void 0 : _latestEntry$openAler2.value) !== null && _latestEntry$openAler !== void 0 ? _latestEntry$openAler : latestEntry === null || latestEntry === void 0 ? void 0 : latestEntry.openAlerts) !== null && _ref5 !== void 0 ? _ref5 : 0,\n          label: \"Open Alerts\",\n          color: \"#f44336\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MetricCircle, {\n          value: (_ref6 = (_latestEntry$temperat = latestEntry === null || latestEntry === void 0 ? void 0 : (_latestEntry$temperat2 = latestEntry.temperature) === null || _latestEntry$temperat2 === void 0 ? void 0 : _latestEntry$temperat2.value) !== null && _latestEntry$temperat !== void 0 ? _latestEntry$temperat : latestEntry === null || latestEntry === void 0 ? void 0 : latestEntry.temperature) !== null && _ref6 !== void 0 ? _ref6 : 0,\n          label: \"Temperature\",\n          color: \"#ff9800\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 373,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(MetricCircle, {\n          value: (_ref7 = (_latestEntry$humidity = latestEntry === null || latestEntry === void 0 ? void 0 : (_latestEntry$humidity2 = latestEntry.humidity) === null || _latestEntry$humidity2 === void 0 ? void 0 : _latestEntry$humidity2.value) !== null && _latestEntry$humidity !== void 0 ? _latestEntry$humidity : latestEntry === null || latestEntry === void 0 ? void 0 : latestEntry.humidity) !== null && _ref7 !== void 0 ? _ref7 : 0,\n          label: \"Humidity\",\n          color: \"#2196f3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 1\n        }, this), /*#__PURE__*/_jsxDEV(MetricCircle, {\n          value: (_ref8 = (_latestEntry$oilLevel = latestEntry === null || latestEntry === void 0 ? void 0 : (_latestEntry$oilLevel2 = latestEntry.oilLevel) === null || _latestEntry$oilLevel2 === void 0 ? void 0 : _latestEntry$oilLevel2.value) !== null && _latestEntry$oilLevel !== void 0 ? _latestEntry$oilLevel : latestEntry === null || latestEntry === void 0 ? void 0 : latestEntry.oilLevel) !== null && _ref8 !== void 0 ? _ref8 : 0,\n          label: \"Oil Level\",\n          color: \"#4caf50\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this);\n  };\n  const temperatureChartData = {\n    labels: (telemetryData === null || telemetryData === void 0 ? void 0 : telemetryData.map(entry => new Date(entry.timestamp).toLocaleTimeString())) || [],\n    datasets: [{\n      label: 'Temperature',\n      data: (telemetryData === null || telemetryData === void 0 ? void 0 : telemetryData.map(entry => {\n        if (typeof entry.temperature === 'object') {\n          return entry.temperature.value || 0;\n        }\n        return entry.temperature || 0;\n      })) || [],\n      borderColor: '#ff9800',\n      tension: 0.1\n    }]\n  };\n  const oilLevelChartData = {\n    labels: (telemetryData === null || telemetryData === void 0 ? void 0 : telemetryData.map(entry => new Date(entry.timestamp).toLocaleTimeString())) || [],\n    datasets: [{\n      label: 'Oil Level',\n      data: (telemetryData === null || telemetryData === void 0 ? void 0 : telemetryData.map(entry => {\n        if (typeof entry.oilLevel === 'object') {\n          return entry.oilLevel.value || 0;\n        }\n        return entry.oilLevel || 0;\n      })) || [],\n      borderColor: '#4caf50',\n      tension: 0.1\n    }]\n  };\n\n  // Update the table rendering section in renderCharts\n  const renderCharts = () => {\n    if (!selectedDevice || realtimeData.length === 0) {\n      return /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          textAlign: 'center',\n          py: 3,\n          mt: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          color: \"text.secondary\",\n          children: \"No telemetry data available for this device in CosmosDB.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          sx: {\n            mt: 1\n          },\n          children: \"Please select a device that has data stored in the CosmosDB container.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        sx: {\n          mt: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            mb: 1,\n            children: \"Temperature Over Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Paper, {\n            sx: {\n              p: 2,\n              height: 250\n            },\n            children: /*#__PURE__*/_jsxDEV(Line, {\n              data: temperatureChartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 446,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            mb: 1,\n            children: \"Oil Level Over Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Paper, {\n            sx: {\n              p: 2,\n              height: 250\n            },\n            children: /*#__PURE__*/_jsxDEV(Line, {\n              data: oilLevelChartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 4\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          mb: 1,\n          children: \"Latest Readings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n          component: Paper,\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            size: \"small\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Timestamp\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 464,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Temperature (\\xB0C)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 465,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Oil Level (%)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 466,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 463,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 462,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: telemetryData.length > 0 ? telemetryData.map((item, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: new Date(item.timestamp).toLocaleString()\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 473,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: typeof item.temperature === 'object' && item.temperature.value !== undefined ? item.temperature.value : typeof item.temperature === 'number' ? item.temperature : '0'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 476,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: typeof item.oilLevel === 'object' && item.oilLevel.value !== undefined ? item.oilLevel.value : typeof item.oilLevel === 'number' ? item.oilLevel : '0'\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 483,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 472,\n                columnNumber: 21\n              }, this)) : /*#__PURE__*/_jsxDEV(TableRow, {\n                children: /*#__PURE__*/_jsxDEV(TableCell, {\n                  colSpan: 3,\n                  align: \"center\",\n                  children: \"Waiting for real-time data...\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 494,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 493,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 461,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      sx: {\n        mt: 4,\n        mb: 4,\n        ml: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        fontWeight: \"bold\",\n        mb: 3,\n        children: \"Telemetry Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"plant-select-label\",\n              children: \"Select Plant\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 519,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"plant-select-label\",\n              value: selectedPlant,\n              onChange: handlePlantChange,\n              label: \"Select Plant\",\n              disabled: loading,\n              children: plants.map(plant => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: plant._id,\n                children: plant.plantName\n              }, plant._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 528,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 520,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 518,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            sx: {\n              mb: 2\n            },\n            disabled: !selectedPlant || loading,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"device-select-label\",\n              children: \"Select Device\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 538,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"device-select-label\",\n              value: selectedDevice,\n              onChange: handleDeviceChange,\n              label: \"Select Device\",\n              children: devices.map(device => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: device._id,\n                children: device.deviceName\n              }, device._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 546,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 539,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          my: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 11\n      }, this), selectedDevice && !loading && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            border: 1,\n            borderColor: 'divider',\n            borderRadius: 1,\n            overflow: 'hidden'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: activeTab === \"status\" ? \"contained\" : \"text\",\n            onClick: () => setActiveTab(\"status\"),\n            sx: {\n              flex: 1,\n              py: 1.5,\n              borderRadius: 0,\n              color: activeTab === \"status\" ? \"#fff\" : \"inherit\",\n              backgroundColor: activeTab === \"status\" ? \"#1976d2\" : \"transparent\"\n            },\n            children: [\"Status\", activeTab === \"status\" && /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              sx: {\n                ml: 1\n              },\n              children: getConnectionStatus()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 587,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 574,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            orientation: \"vertical\",\n            flexItem: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 593,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: activeTab === \"alarms\" ? \"contained\" : \"text\",\n            onClick: () => setActiveTab(\"alarms\"),\n            sx: {\n              flex: 1,\n              py: 1.5,\n              borderRadius: 0,\n              color: activeTab === \"alarms\" ? \"#fff\" : \"inherit\",\n              backgroundColor: activeTab === \"alarms\" ? \"#1976d2\" : \"transparent\"\n            },\n            children: [\"Alarms\", activeTab === \"alarms\" && latestEntry && /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              sx: {\n                ml: 1\n              },\n              children: [latestEntry.openAlerts || 0, \" Open Alerts console.log(\\\"latestEntry:\\\", latestEntry); console.log(\\\"Type of latestEntry.openAlerts:\\\", typeof latestEntry.openAlerts);\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 608,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 595,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            orientation: \"vertical\",\n            flexItem: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 617,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: activeTab === \"cmd\" ? \"contained\" : \"text\",\n            onClick: () => setActiveTab(\"cmd\"),\n            sx: {\n              flex: 1,\n              py: 1.5,\n              borderRadius: 0,\n              color: activeTab === \"cmd\" ? \"#fff\" : \"inherit\",\n              backgroundColor: activeTab === \"cmd\" ? \"#1976d2\" : \"transparent\"\n            },\n            children: \"Command Center\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 619,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 565,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(Paper, {\n          sx: {\n            p: 2,\n            mt: 2,\n            bgcolor: 'error.light',\n            color: 'error.main',\n            borderRadius: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 645,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 636,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 3\n          },\n          children: [activeTab === \"status\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [renderDeviceMetrics(), renderCharts()]\n          }, void 0, true), activeTab === \"alarms\" && renderAlarmsTab(), activeTab === \"cmd\" && renderCommandCenterTab()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 650,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 508,\n    columnNumber: 5\n  }, this);\n};\n_s2(TelemetryDashboard, \"+0qgGazxGWNgKfxhFU8fw4wBTf4=\", false, function () {\n  return [useTheme];\n});\n_c2 = TelemetryDashboard;\nexport default TelemetryDashboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"MetricCircle\");\n$RefreshReg$(_c2, \"TelemetryDashboard\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","getPlants","getDevices","getLatestTelemetryEntry","getRealtimeTelemetryData","getTelemetryData","clearDeviceCache","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","ArcElement","register","Container","Select","MenuItem","FormControl","InputLabel","Table","TableBody","TableCell","TableHead","TableRow","Paper","Box","Typography","CircularProgress","Button","Grid","Divider","TableContainer","Sidebar","useTheme","jsxDEV","_jsxDEV","Fragment","_Fragment","MetricCircle","value","label","color","size","thickness","_s","theme","displayValue","sx","display","flexDirection","alignItems","m","children","position","mb","variant","palette","primary","main","transform","strokeLinecap","fileName","_jsxFileName","lineNumber","columnNumber","top","left","bottom","right","justifyContent","component","fontWeight","_c","TelemetryDashboard","_s2","plants","setPlants","devices","setDevices","selectedPlant","setSelectedPlant","selectedDevice","setSelectedDevice","telemetryData","setTelemetryData","latestEntry","setLatestEntry","realtimeData","setRealtimeData","loading","setLoading","error","setError","activeTab","setActiveTab","connectionStatus","setConnectionStatus","chartOptions","responsive","maintainAspectRatio","scales","x","grid","y","beginAtZero","plugins","legend","fetchPlants","plantData","length","_id","console","fetchDevices","deviceData","fetchLatestEntry","_ref","_data$temperature$val","_data$temperature","_ref2","_data$humidity$value","_data$humidity","_ref3","_data$oilLevel$value","_data$oilLevel","_ref4","_data$openAlerts$valu","_data$openAlerts","data","normalized","temperature","humidity","oilLevel","openAlerts","Array","isArray","alerts","fetchRealtimeData","fetchHistoricalData","processedData","map","entry","_entry$temperature","_entry$oilLevel","timestamp","slice","Promise","all","then","latestInterval","setInterval","realtimeInterval","historicalInterval","clearInterval","handlePlantChange","e","target","debouncedLoading","setTimeout","handleDeviceChange","newDeviceId","getConnectionStatus","renderAlarmsTab","textAlign","py","renderCommandCenterTab","renderDeviceMetrics","_ref5","_latestEntry$openAler","_latestEntry$openAler2","_ref6","_latestEntry$temperat","_latestEntry$temperat2","_ref7","_latestEntry$humidity","_latestEntry$humidity2","_ref8","_latestEntry$oilLevel","_latestEntry$oilLevel2","mt","flexWrap","temperatureChartData","labels","Date","toLocaleTimeString","datasets","borderColor","tension","oilLevelChartData","renderCharts","container","spacing","item","xs","md","p","height","options","index","toLocaleString","undefined","colSpan","align","maxWidth","ml","fullWidth","id","labelId","onChange","disabled","plant","plantName","device","deviceName","my","border","borderRadius","overflow","onClick","flex","backgroundColor","orientation","flexItem","bgcolor","_c2","$RefreshReg$"],"sources":["C:/Users/Garvisha/Desktop/New folder (2)/Front/oxygen-frontend/src/pages/TelemetryDashboard.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\nimport { getPlants } from \"../services/plantService\";\nimport { getDevices } from \"../services/deviceService\";\nimport { \n  getLatestTelemetryEntry, \n  getRealtimeTelemetryData, \n  getTelemetryData,\n  clearDeviceCache \n} from \"../services/telemetryService\";\nimport { Line } from \"react-chartjs-2\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n} from \"chart.js\";\n\nChartJS.register(\n  CategoryScale, \n  LinearScale, \n  PointElement, \n  LineElement, \n  Title, \n  Tooltip, \n  Legend,\n  ArcElement\n);\n\nimport {\n  Container,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Paper,\n  Box,\n  Typography,\n  CircularProgress,\n  Button,\n  Grid,\n  Divider,\n  TableContainer,\n} from \"@mui/material\";\n\nimport Sidebar from \"../components/Sidebar\";\nimport { useTheme } from '@mui/material/styles';\n\n// Custom circular progress visualization component that matches the reference UI\nconst MetricCircle = ({ value, label, color, size = 100, thickness = 5 }) => {\n  const theme = useTheme();\n  const displayValue = value || 0;\n  \n  return (\n    <Box sx={{ \n      display: 'flex', \n      flexDirection: 'column', \n      alignItems: 'center',\n      m: 2\n    }}>\n      <Box sx={{ \n        position: 'relative', \n        display: 'inline-flex',\n        mb: 1\n      }}>\n        <CircularProgress\n          variant=\"determinate\"\n          value={75} // Fixed angle for the visual style\n          size={size}\n          thickness={thickness}\n          sx={{ \n            color: color || theme.palette.primary.main,\n            transform: 'rotate(135deg)',\n            '& .MuiCircularProgress-circle': {\n              strokeLinecap: 'round',\n            }\n          }}\n        />\n        <Box\n          sx={{\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0,\n            position: 'absolute',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          <Typography variant=\"h5\" component=\"div\" fontWeight=\"bold\">\n            {displayValue}\n            {label === 'Temperature' ? '°C' : label === 'Humidity' || label === 'Oil Level' ? '%' : ''}\n          </Typography>\n        </Box>\n      </Box>\n      <Typography variant=\"body1\" component=\"div\">\n        {label}\n      </Typography>\n    </Box>\n  );\n};\n\nconst TelemetryDashboard = () => {\n  const theme = useTheme();\n  const [plants, setPlants] = useState([]);\n  const [devices, setDevices] = useState([]);\n  const [selectedPlant, setSelectedPlant] = useState(\"\");\n  const [selectedDevice, setSelectedDevice] = useState(\"esp32\");\n  const [telemetryData, setTelemetryData] = useState([]);\n  const [latestEntry, setLatestEntry] = useState(null);\n  const [realtimeData, setRealtimeData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState(\"status\");\n  const [connectionStatus, setConnectionStatus] = useState(\"disconnected\");\n\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        grid: {\n          display: false\n        }\n      },\n      y: {\n        beginAtZero: true,\n        grid: {\n          color: '#f0f0f0'\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        display: false\n      }\n    }\n  };\n\n  useEffect(() => {\n    const fetchPlants = async () => {\n      try {\n        setLoading(true);\n        const plantData = await getPlants();\n        setPlants(plantData);\n        if (plantData.length > 0) {\n          setSelectedPlant(plantData[0]._id);\n        }\n      } catch (error) {\n        console.error(\"❌ Error fetching plants:\", error);\n        setError(\"Failed to load plants. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPlants();\n  }, []); // Run only once on mount\n  \n  useEffect(() => {\n    const fetchDevices = async () => {\n      if (!selectedPlant) {\n        \n        return;\n      }\n     \n      try {\n        setLoading(true);\n        const deviceData = await getDevices(selectedPlant);\n        setDevices(deviceData);\n        if (deviceData.length > 0) {\n          setSelectedDevice(deviceData[0]._id); // Use deviceId\n        }\n      } catch (error) {\n        console.error(\"❌ Error fetching devices:\", error);\n        setError(\"Failed to load devices. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n  \n    fetchDevices();\n  }, [selectedPlant]); // Fetch devices when the plant selection changes\n  \n  const fetchLatestEntry = useCallback(async () => {\n    if (!selectedDevice) return;\n  \n    try {\n      const data = await getLatestTelemetryEntry(selectedDevice);\n  \n      // Normalize fields like temperature, humidity, etc.\n      const normalized = {\n        ...data,\n        temperature: data?.temperature?.value ?? data?.temperature ?? 0,\n        humidity: data?.humidity?.value ?? data?.humidity ?? 0,\n        oilLevel: data?.oilLevel?.value ?? data?.oilLevel ?? 0,\n        openAlerts: Array.isArray(data?.alerts) ? data.alerts.length : (data?.openAlerts?.value ?? data?.openAlerts ?? 0),\n      };\n  \n      setLatestEntry(normalized);\n    } catch (error) {\n      console.error(\"❌ Error fetching latest telemetry:\", error);\n      setError(\"Failed to fetch latest telemetry data.\");\n    }\n  }, [selectedDevice]);\n  const fetchRealtimeData = useCallback(async () => {\n    if (!selectedDevice) return;\n\n    try {\n      const data = await getRealtimeTelemetryData(selectedDevice);\n      \n        setRealtimeData(data);\n    } catch (error) {\n      console.error(\"❌ Error fetching realtime data:\", error);\n      setRealtimeData([]);\n    }\n  }, [selectedDevice]);\n  \n  const fetchHistoricalData = useCallback(async () => {\n    if (!selectedDevice) {\n      setTelemetryData([]);\n      return;\n    }\n   \n    try {\n      const data = await getTelemetryData(selectedDevice);\n      if (data?.length > 0) {\n        const processedData = data.map(entry => ({\n          ...entry,\n          temperature: entry.temperature?.value || entry.temperature || 0,\n          oilLevel: entry.oilLevel?.value || entry.oilLevel || 0,\n          timestamp: entry.timestamp\n        }));\n        \n        setTelemetryData(processedData.slice(0, 20));\n        setError(null);\n      }\n    } catch (error) {\n      console.error(\"❌ Error fetching historical data:\", error);\n      setError(\"Failed to fetch telemetry data.\");\n    }\n  }, [selectedDevice]);\n  \n  useEffect(() => {\n    if (!selectedDevice) return;\n\n    // Initial data fetch - all at once\n    Promise.all([\n      fetchLatestEntry(),\n      fetchRealtimeData(),\n      fetchHistoricalData()\n    ]).then(() => {\n      setLoading(false);\n    });\n\n    // Optimize intervals for better UX:\n    // - Faster initial updates\n    // - Longer display time for readability\n    // - Staggered updates to prevent simultaneous fetches\n    const latestInterval = setInterval(fetchLatestEntry, 3000);    // Every 3 seconds\n    const realtimeInterval = setInterval(fetchRealtimeData, 5000); // Every 5 seconds\n    const historicalInterval = setInterval(fetchHistoricalData, 15000); // Every 15 seconds\n\n    return () => {\n      clearInterval(latestInterval);\n      clearInterval(realtimeInterval);\n      clearInterval(historicalInterval);\n    };\n  }, [selectedDevice, fetchLatestEntry, fetchRealtimeData, fetchHistoricalData]);\n  \n  const handlePlantChange = (e) => {\n    setSelectedPlant(e.target.value);\n    setSelectedDevice(\"\");\n    clearDeviceCache();\n  };\n  \n  const debouncedLoading = useCallback((value) => {\n    setTimeout(() => setLoading(value), value ? 0 : 300);\n  }, []);\n\n  const handleDeviceChange = (e) => {\n    const newDeviceId = e.target.value;\n    debouncedLoading(true);\n    setSelectedDevice(newDeviceId);\n    clearDeviceCache(newDeviceId);\n    \n    // Reset data states when device changes\n    setTelemetryData([]);\n    setRealtimeData([]);\n    setLatestEntry(null);\n    setError(null);\n  };\n  \n  const getConnectionStatus = () => {\n    switch (connectionStatus) {\n      case \"connected\": return \"Connected\";\n      case \"disconnected\": return \"Disconnected\";\n      case \"error\": return \"Connection Error\";\n      case \"no data\": return \"No data available\";\n      default: return \"Unknown\";\n    }\n  };\n  \n  const renderAlarmsTab = () => {\n    return (\n      <Box sx={{ textAlign: 'center', py: 2 }}>\n        {latestEntry ? (\n          <Typography variant=\"h6\">\n            {typeof latestEntry.openAlerts === 'object' \n              ? latestEntry.openAlerts.value || 0 \n              : latestEntry.openAlerts || 0} Open Alerts\n          </Typography>\n        ) : (\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            No alerts data available\n          </Typography>\n        )}\n      </Box>\n    );\n  };\n\n  // Render the command center tab content\n  const renderCommandCenterTab = () => {\n    return (\n      <Box sx={{ textAlign: 'center', py: 2 }}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          Command Center functionality coming soon\n        </Typography>\n      </Box>\n    );\n  };\n\n  // Render device metrics in the status tab\n  const renderDeviceMetrics = () => {\n    if (!latestEntry) {\n      return (\n        <Box sx={{ textAlign: 'center', py: 3 }}>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            No telemetry data available for this device. Please check CosmosDB connection.\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 2 }}>\n            If this is a real device and data exists in CosmosDB, check that device IDs match between the frontend and database.\n          </Typography>\n        </Box>\n      );\n    }\n\n    return (\n      <Box sx={{ mt: 3 }}>\n        <Typography variant=\"h6\" fontWeight=\"bold\" mb={2}>\n          Device Metrics\n        </Typography>\n        <Box sx={{ \n          display: 'flex', \n          justifyContent: 'space-around', \n          flexWrap: 'wrap',\n          mb: 3 \n        }}>\n          <MetricCircle \n  value={latestEntry?.openAlerts?.value ?? latestEntry?.openAlerts ?? 0}\n  label=\"Open Alerts\" \n  color=\"#f44336\"\n/>\n<MetricCircle \n  value={latestEntry?.temperature?.value ?? latestEntry?.temperature ?? 0}\n  label=\"Temperature\" \n  color=\"#ff9800\"\n/>\n<MetricCircle \n  value={latestEntry?.humidity?.value ?? latestEntry?.humidity ?? 0}\n  label=\"Humidity\" \n  color=\"#2196f3\"\n/>\n<MetricCircle \n  value={latestEntry?.oilLevel?.value ?? latestEntry?.oilLevel ?? 0}\n  label=\"Oil Level\" \n  color=\"#4caf50\"\n/>\n\n      </Box>\n    </Box>\n  );\n};\n\n\n  const temperatureChartData = {\n    labels: telemetryData?.map(entry => new Date(entry.timestamp).toLocaleTimeString()) || [],\n    datasets: [{\n      label: 'Temperature',\n      data: telemetryData?.map(entry => {\n        if (typeof entry.temperature === 'object') {\n          return entry.temperature.value || 0;\n        }\n        return entry.temperature || 0;\n      }) || [],\n      borderColor: '#ff9800',\n      tension: 0.1\n    }]\n  };\n  \n  const oilLevelChartData = {\n    labels: telemetryData?.map(entry => new Date(entry.timestamp).toLocaleTimeString()) || [],\n    datasets: [{\n      label: 'Oil Level',\n      data: telemetryData?.map(entry => {\n        if (typeof entry.oilLevel === 'object') {\n          return entry.oilLevel.value || 0;\n        }\n        return entry.oilLevel || 0;\n      }) || [],\n      borderColor: '#4caf50',\n      tension: 0.1\n    }]\n  };\n\n  // Update the table rendering section in renderCharts\n  const renderCharts = () => {\n    if (!selectedDevice || realtimeData.length === 0) {\n      return (\n        <Box sx={{ textAlign: 'center', py: 3, mt: 3 }}>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            No telemetry data available for this device in CosmosDB.\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n            Please select a device that has data stored in the CosmosDB container.\n          </Typography>\n        </Box>\n      );\n    }\n\n    return (\n      <>\n        <Grid container spacing={3} sx={{ mt: 2 }}>\n          <Grid item xs={12} md={6}>\n            <Typography variant=\"h6\" mb={1}>Temperature Over Time</Typography>\n            <Paper sx={{ p: 2, height: 250 }}>\n              <Line data={temperatureChartData} options={chartOptions} />\n            </Paper>\n          </Grid>\n          \n          <Grid item xs={12} md={6}>\n            <Typography variant=\"h6\" mb={1}>Oil Level Over Time</Typography>\n            <Paper sx={{ p: 2, height: 250 }}>\n              <Line data={oilLevelChartData} options={chartOptions} />\n            </Paper>\n          </Grid>\n        </Grid>\n\n        <Box sx={{ mt: 4 }}>\n          <Typography variant=\"h6\" mb={1}>Latest Readings</Typography>\n          <TableContainer component={Paper}>\n            <Table size=\"small\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>Timestamp</TableCell>\n                  <TableCell>Temperature (°C)</TableCell>\n                  <TableCell>Oil Level (%)</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {telemetryData.length > 0 ? (\n                  telemetryData.map((item, index) => (\n                    <TableRow key={index}>\n                      <TableCell>\n                        {new Date(item.timestamp).toLocaleString()}\n                      </TableCell>\n                      <TableCell>\n                        {typeof item.temperature === 'object' && item.temperature.value !== undefined\n                          ? item.temperature.value\n                          : typeof item.temperature === 'number'\n                          ? item.temperature\n                          : '0'}\n                      </TableCell>\n                      <TableCell>\n                        {typeof item.oilLevel === 'object' && item.oilLevel.value !== undefined\n                          ? item.oilLevel.value\n                          : typeof item.oilLevel === 'number'\n                          ? item.oilLevel\n                          : '0'}\n                      </TableCell>\n                    </TableRow>\n                  ))\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={3} align=\"center\">\n                      Waiting for real-time data...\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Box>\n      </>\n    );\n  };\n\n  return (\n    <Box sx={{ display: \"flex\" }}>\n      <Sidebar />\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4, ml: 4 }}>\n        <Typography variant=\"h4\" fontWeight=\"bold\" mb={3}>\n          Telemetry Dashboard\n        </Typography>\n        \n        {/* Plant and Device Selection */}\n        <Grid container spacing={2}>\n          <Grid item xs={12} md={6}>\n            <FormControl fullWidth sx={{ mb: 2 }}>\n              <InputLabel id=\"plant-select-label\">Select Plant</InputLabel>\n              <Select\n                labelId=\"plant-select-label\"\n                value={selectedPlant}\n                onChange={handlePlantChange}\n                label=\"Select Plant\"\n                disabled={loading}\n              >\n                {plants.map((plant) => (\n                  <MenuItem key={plant._id} value={plant._id}>\n                    {plant.plantName}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n          \n          <Grid item xs={12} md={6}>\n            <FormControl fullWidth sx={{ mb: 2 }} disabled={!selectedPlant || loading}>\n              <InputLabel id=\"device-select-label\">Select Device</InputLabel>\n              <Select\n                labelId=\"device-select-label\"\n                value={selectedDevice}\n                onChange={handleDeviceChange}\n                label=\"Select Device\"\n              >\n                {devices.map((device) => (\n                  <MenuItem key={device._id} value={device._id}>\n                    {device.deviceName}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n        </Grid>\n\n        {/* Loading indicator */}\n        {loading && (\n          <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>\n            <CircularProgress />\n          </Box>\n        )}\n        \n        {/* Tab navigation */}\n        {selectedDevice && !loading && (\n          <>\n            <Box \n              sx={{ \n                display: 'flex',\n                border: 1,\n                borderColor: 'divider',\n                borderRadius: 1,\n                overflow: 'hidden'\n              }}\n            >\n              <Button \n                variant={activeTab === \"status\" ? \"contained\" : \"text\"}\n                onClick={() => setActiveTab(\"status\")}\n                sx={{ \n                  flex: 1, \n                  py: 1.5,\n                  borderRadius: 0,\n                  color: activeTab === \"status\" ? \"#fff\" : \"inherit\",\n                  backgroundColor: activeTab === \"status\" ? \"#1976d2\" : \"transparent\"\n                }}\n              >\n                Status\n                {activeTab === \"status\" && (\n                  <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                    {getConnectionStatus()}\n                  </Typography>\n                )}\n              </Button>\n              \n              <Divider orientation=\"vertical\" flexItem />\n              \n              <Button \n                variant={activeTab === \"alarms\" ? \"contained\" : \"text\"}\n                onClick={() => setActiveTab(\"alarms\")}\n                sx={{ \n                  flex: 1, \n                  py: 1.5,\n                  borderRadius: 0,\n                  color: activeTab === \"alarms\" ? \"#fff\" : \"inherit\",\n                  backgroundColor: activeTab === \"alarms\" ? \"#1976d2\" : \"transparent\"\n                }}\n              >\n                Alarms\n                {activeTab === \"alarms\" && latestEntry && (\n                  <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                    {latestEntry.openAlerts || 0} Open Alerts\n                    console.log(\"latestEntry:\", latestEntry);\nconsole.log(\"Type of latestEntry.openAlerts:\", typeof latestEntry.openAlerts);\n\n                  </Typography>\n                )}\n              </Button>\n              \n              <Divider orientation=\"vertical\" flexItem />\n              \n              <Button \n                variant={activeTab === \"cmd\" ? \"contained\" : \"text\"}\n                onClick={() => setActiveTab(\"cmd\")}\n                sx={{ \n                  flex: 1, \n                  py: 1.5,\n                  borderRadius: 0,\n                  color: activeTab === \"cmd\" ? \"#fff\" : \"inherit\",\n                  backgroundColor: activeTab === \"cmd\" ? \"#1976d2\" : \"transparent\"\n                }}\n              >\n                Command Center\n              </Button>\n            </Box>\n\n            {/* Error message */}\n            {error && (\n              <Paper \n                sx={{ \n                  p: 2, \n                  mt: 2, \n                  bgcolor: 'error.light', \n                  color: 'error.main',\n                  borderRadius: 1\n                }}\n              >\n                <Typography>{error}</Typography>\n              </Paper>\n            )}\n            \n            {/* Tab content */}\n            <Box sx={{ mt: 3 }}>\n              {activeTab === \"status\" && (\n                <>\n                  {renderDeviceMetrics()}\n                  {renderCharts()}\n                </>\n              )}\n              \n              {activeTab === \"alarms\" && renderAlarmsTab()}\n              \n              {activeTab === \"cmd\" && renderCommandCenterTab()}\n            </Box>\n          </>\n        )}\n      </Container>\n    </Box>\n  );\n};\n\nexport default TelemetryDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}