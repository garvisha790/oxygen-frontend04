{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Garvisha\\\\Desktop\\\\New folder (2)\\\\Front\\\\oxygen-frontend\\\\src\\\\pages\\\\TelemetryDashboard.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { getPlants } from \"../services/plantService\";\nimport { getDevices } from \"../services/deviceService\";\nimport { getLatestTelemetryEntry, getRealtimeTelemetryData, getTelemetryData, clearDeviceCache } from \"../services/telemetryService\";\nimport { Line } from \"react-chartjs-2\";\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement } from \"chart.js\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, ArcElement);\nimport { Container, Select, MenuItem, FormControl, InputLabel, Table, TableBody, TableCell, TableHead, TableRow, Paper, Box, Typography, CircularProgress, Button, Grid, Divider, TableContainer } from \"@mui/material\";\nimport Sidebar from \"../components/Sidebar\";\nimport { useTheme } from '@mui/material/styles';\n\n// Custom circular progress visualization component that matches the reference UI\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MetricCircle = ({\n  value,\n  label,\n  color,\n  size = 100,\n  thickness = 5\n}) => {\n  _s();\n  const theme = useTheme();\n  const displayValue = value || 0;\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      m: 2\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        position: 'relative',\n        display: 'inline-flex',\n        mb: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n        variant: \"determinate\",\n        value: 75 // Fixed angle for the visual style\n        ,\n        size: size,\n        thickness: thickness,\n        sx: {\n          color: color || theme.palette.primary.main,\n          transform: 'rotate(135deg)',\n          '& .MuiCircularProgress-circle': {\n            strokeLinecap: 'round'\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          top: 0,\n          left: 0,\n          bottom: 0,\n          right: 0,\n          position: 'absolute',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h5\",\n          component: \"div\",\n          fontWeight: \"bold\",\n          children: [displayValue, label === 'Temperature' ? '°C' : label === 'Humidity' || label === 'Oil Level' ? '%' : '']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body1\",\n      component: \"div\",\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(MetricCircle, \"VrMvFCCB9Haniz3VCRPNUiCauHs=\", false, function () {\n  return [useTheme];\n});\n_c = MetricCircle;\nconst TelemetryDashboard = () => {\n  _s2();\n  const theme = useTheme();\n  const [plants, setPlants] = useState([]);\n  const [devices, setDevices] = useState([]);\n  const [selectedPlant, setSelectedPlant] = useState(\"\");\n  const [selectedDevice, setSelectedDevice] = useState(\"esp32\");\n  const [telemetryData, setTelemetryData] = useState([]);\n  const [latestEntry, setLatestEntry] = useState(null);\n  const [realtimeData, setRealtimeData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState(\"status\");\n  const [connectionStatus, setConnectionStatus] = useState(\"disconnected\");\n\n  // Fetch plants on component mount\n  useEffect(() => {\n    const fetchPlants = async () => {\n      try {\n        setLoading(true);\n        const plantData = await getPlants();\n        if (plantData && plantData.length > 0) {\n          setPlants(plantData);\n          // Auto-select first plant if none selected\n          if (!selectedPlant && plantData.length > 0) {\n            setSelectedPlant(plantData[0]._id);\n          }\n        }\n      } catch (error) {\n        console.error(\"❌ Error fetching plants:\", error);\n        setError(\"Failed to load plants. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPlants();\n  }, [selectedPlant]);\n\n  // Fetch devices when plant selection changes\n  useEffect(() => {\n    const fetchDevices = async () => {\n      if (!selectedPlant) {\n        setDevices([]);\n        setSelectedDevice(\"\");\n        return;\n      }\n      try {\n        setLoading(true);\n        const deviceData = await getDevices(selectedPlant);\n        if (deviceData && deviceData.length > 0) {\n          setDevices(deviceData);\n          // Auto-select first device if none selected\n          if (!selectedDevice && deviceData.length > 0) {\n            setSelectedDevice(deviceData[0]._id);\n          }\n        } else {\n          setDevices([]);\n          setSelectedDevice(\"\");\n        }\n      } catch (error) {\n        console.error(\"❌ Error fetching devices:\", error);\n        setError(\"Failed to load devices. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDevices();\n  }, [selectedPlant]);\n\n  // Fetch latest telemetry entry for dashboard metrics\n  const fetchLatestEntry = useCallback(async () => {\n    if (!selectedDevice) {\n      setLatestEntry(null);\n      setConnectionStatus(\"disconnected\");\n      return;\n    }\n    try {\n      const data = await getLatestTelemetryEntry(selectedDevice);\n      if (data) {\n        setLatestEntry(data);\n        setConnectionStatus(\"connected\");\n        setError(null);\n      } else {\n        setConnectionStatus(\"no data\");\n        setError(\"No telemetry data available for this device. Showing latest stored data if available.\");\n      }\n    } catch (error) {\n      console.error(\"❌ Error fetching latest telemetry:\", error);\n      setConnectionStatus(\"error\");\n      setError(\"Failed to fetch latest telemetry data. Showing latest stored data if available.\");\n    }\n  }, [selectedDevice]);\n\n  // Fetch realtime telemetry data for charts\n  const fetchRealtimeData = useCallback(async () => {\n    if (!selectedDevice) {\n      setRealtimeData([]);\n      return;\n    }\n    try {\n      setLoading(true);\n      const data = await getRealtimeTelemetryData(selectedDevice);\n      setLoading(false);\n      if (data && data.length > 0) {\n        setRealtimeData(data);\n        setError(null);\n      } else {\n        // If no realtime data, try to use historical data\n        try {\n          const historicalData = await getTelemetryData(selectedDevice);\n          if (historicalData && historicalData.length > 0) {\n            setRealtimeData(historicalData.slice(0, 20));\n            setError(\"No real-time data available. Showing historical data instead.\");\n          } else {\n            setError(\"No telemetry data available in CosmosDB for this device.\");\n          }\n        } catch (innerError) {\n          console.error(\"❌ Error fetching historical data as fallback:\", innerError);\n          setError(\"Failed to fetch any telemetry data from CosmosDB.\");\n        }\n      }\n    } catch (error) {\n      setLoading(false);\n      console.error(\"❌ Error fetching realtime data:\", error);\n      setError(\"Failed to fetch real-time data from CosmosDB. Check connection settings.\");\n    }\n  }, [selectedDevice]);\n\n  // Fetch historical telemetry data for tables\n  const fetchHistoricalData = useCallback(async () => {\n    if (!selectedDevice) {\n      setTelemetryData([]);\n      return;\n    }\n    try {\n      setLoading(true);\n      const data = await getTelemetryData(selectedDevice);\n      setLoading(false);\n      if (data && data.length > 0) {\n        setTelemetryData(data.slice(0, 20)); // Last 20 entries\n        setError(null);\n\n        // If we have historical data but no latest entry, use the most recent historical entry\n        if (!latestEntry && data.length > 0) {\n          // Sort by timestamp, newest first\n          const sortedData = [...data].sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n          setLatestEntry(sortedData[0]);\n        }\n      } else {\n        setError(\"No historical telemetry data available in CosmosDB for this device.\");\n      }\n    } catch (error) {\n      setLoading(false);\n      console.error(\"❌ Error fetching historical data:\", error);\n      setError(\"Failed to fetch telemetry data from CosmosDB. Please check connection settings.\");\n    }\n  }, [selectedDevice, latestEntry]);\n\n  // Set up polling intervals when device changes\n  useEffect(() => {\n    if (!selectedDevice) return;\n\n    // Clear cache when switching devices\n    clearDeviceCache(selectedDevice);\n\n    // Initial fetches\n    fetchLatestEntry();\n    fetchRealtimeData();\n    fetchHistoricalData();\n\n    // Set up polling intervals\n    const latestInterval = setInterval(fetchLatestEntry, 2000);\n    const realtimeInterval = setInterval(fetchRealtimeData, 3000);\n    const historicalInterval = setInterval(fetchHistoricalData, 10000);\n\n    // Cleanup intervals on unmount or device change\n    return () => {\n      clearInterval(latestInterval);\n      clearInterval(realtimeInterval);\n      clearInterval(historicalInterval);\n    };\n  }, [selectedDevice, fetchLatestEntry, fetchRealtimeData, fetchHistoricalData]);\n\n  // Format data for temperature chart\n  const temperatureChartData = {\n    labels: realtimeData.map(data => new Date(data.timestamp).toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    })),\n    datasets: [{\n      label: \"Temperature (°C)\",\n      data: realtimeData.map(data => data.temperature),\n      borderColor: \"#ff6b8b\",\n      backgroundColor: \"rgba(255, 107, 139, 0.1)\",\n      borderWidth: 2,\n      pointRadius: 2,\n      tension: 0.3,\n      fill: false\n    }]\n  };\n\n  // Format data for oil level chart\n  const oilLevelChartData = {\n    labels: realtimeData.map(data => new Date(data.timestamp).toLocaleTimeString([], {\n      hour: '2-digit',\n      minute: '2-digit'\n    })),\n    datasets: [{\n      label: \"Oil Level (%)\",\n      data: realtimeData.map(data => data.oilLevel),\n      borderColor: \"#4dabf5\",\n      backgroundColor: \"rgba(77, 171, 245, 0.1)\",\n      borderWidth: 2,\n      pointRadius: 2,\n      tension: 0.3,\n      fill: false\n    }]\n  };\n\n  // Chart options for better appearance to match reference UI\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top',\n        labels: {\n          boxWidth: 10,\n          usePointStyle: true,\n          pointStyle: 'rect'\n        }\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false\n      }\n    },\n    scales: {\n      y: {\n        beginAtZero: false,\n        grid: {\n          display: true,\n          color: 'rgba(200, 200, 200, 0.1)'\n        },\n        ticks: {\n          font: {\n            size: 10\n          }\n        }\n      },\n      x: {\n        grid: {\n          display: false\n        },\n        ticks: {\n          maxRotation: 45,\n          minRotation: 45,\n          font: {\n            size: 10\n          }\n        }\n      }\n    },\n    animation: {\n      duration: 500\n    }\n  };\n\n  // Handlers for select changes\n  const handlePlantChange = e => {\n    const newPlantId = e.target.value;\n    setSelectedPlant(newPlantId);\n    setSelectedDevice(\"\");\n    clearDeviceCache(); // Clear all device cache when plant changes\n  };\n  const handleDeviceChange = e => {\n    const newDeviceId = e.target.value;\n    setSelectedDevice(newDeviceId);\n    clearDeviceCache(newDeviceId); // Clear cache for this specific device\n  };\n\n  // Render connection status indicator\n  const getConnectionStatus = () => {\n    if (connectionStatus === \"connected\") {\n      return \"Connected\";\n    } else if (connectionStatus === \"disconnected\") {\n      return \"Disconnected\";\n    } else if (connectionStatus === \"error\") {\n      return \"Connection Error\";\n    } else if (connectionStatus === \"no data\") {\n      return \"No data available\";\n    }\n    return \"Unknown\";\n  };\n\n  // Render the alarms tab content\n  const renderAlarmsTab = () => {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        textAlign: 'center',\n        py: 2\n      },\n      children: latestEntry ? /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: [latestEntry.openAlerts || 0, \" Open Alerts\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        color: \"text.secondary\",\n        children: \"No alerts data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render the command center tab content\n  const renderCommandCenterTab = () => {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        textAlign: 'center',\n        py: 2\n      },\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body1\",\n        color: \"text.secondary\",\n        children: \"Command Center functionality coming soon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render device metrics in the status tab\n  const renderDeviceMetrics = () => {\n    if (!latestEntry) {\n      return /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          textAlign: 'center',\n          py: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          color: \"text.secondary\",\n          children: \"No telemetry data available for this device. Please check CosmosDB connection.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          sx: {\n            mt: 2\n          },\n          children: \"If this is a real device and data exists in CosmosDB, check that device IDs match between the frontend and database.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 3\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        fontWeight: \"bold\",\n        mb: 2,\n        children: \"Device Metrics\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'space-around',\n          flexWrap: 'wrap',\n          mb: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(MetricCircle, {\n          value: latestEntry.openAlerts || 0,\n          label: \"Open Alerts\",\n          color: \"#f44336\" // red\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MetricCircle, {\n          value: latestEntry.temperature || 0,\n          label: \"Temperature\",\n          color: \"#ff9800\" // orange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MetricCircle, {\n          value: latestEntry.humidity || 0,\n          label: \"Humidity\",\n          color: \"#2196f3\" // blue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MetricCircle, {\n          value: latestEntry.oilLevel || 0,\n          label: \"Oil Level\",\n          color: \"#4caf50\" // green\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 7\n    }, this);\n  };\n\n  // Render charts section\n  const renderCharts = () => {\n    if (realtimeData.length === 0) {\n      return /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          textAlign: 'center',\n          py: 3,\n          mt: 3\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          color: \"text.secondary\",\n          children: \"No telemetry data available in CosmosDB to display charts.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"text.secondary\",\n          sx: {\n            mt: 1\n          },\n          children: \"Please ensure data is being properly stored in the CosmosDB container.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        sx: {\n          mt: 2\n        },\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            mb: 1,\n            children: \"Temperature Over Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Paper, {\n            sx: {\n              p: 2,\n              height: 250\n            },\n            children: /*#__PURE__*/_jsxDEV(Line, {\n              data: temperatureChartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 516,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            mb: 1,\n            children: \"Oil Level Over Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Paper, {\n            sx: {\n              p: 2,\n              height: 250\n            },\n            children: /*#__PURE__*/_jsxDEV(Line, {\n              data: oilLevelChartData,\n              options: chartOptions\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 524,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 523,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          mt: 4\n        },\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          mb: 1,\n          children: \"Latest Readings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 530,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n          component: Paper,\n          children: /*#__PURE__*/_jsxDEV(Table, {\n            size: \"small\",\n            children: [/*#__PURE__*/_jsxDEV(TableHead, {\n              children: /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Timestamp\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 535,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Temperature (\\xB0C)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 536,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: \"Oil Level (%)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 537,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 534,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 533,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n              children: telemetryData.length > 0 ? telemetryData.map((item, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n                children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                  children: new Date(item.timestamp).toLocaleString([], {\n                    year: 'numeric',\n                    month: 'numeric',\n                    day: 'numeric',\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    second: '2-digit'\n                  })\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 544,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: item.temperature\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 554,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                  children: item.oilLevel\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 555,\n                  columnNumber: 23\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 543,\n                columnNumber: 21\n              }, this)) : /*#__PURE__*/_jsxDEV(TableRow, {\n                children: /*#__PURE__*/_jsxDEV(TableCell, {\n                  colSpan: 3,\n                  align: \"center\",\n                  children: \"No data available\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 560,\n                  columnNumber: 21\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 559,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 540,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: \"flex\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 575,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"lg\",\n      sx: {\n        mt: 4,\n        mb: 4,\n        ml: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h4\",\n        fontWeight: \"bold\",\n        mb: 3,\n        children: \"Telemetry Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            sx: {\n              mb: 2\n            },\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"plant-select-label\",\n              children: \"Select Plant\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 585,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"plant-select-label\",\n              value: selectedPlant,\n              onChange: handlePlantChange,\n              label: \"Select Plant\",\n              disabled: loading,\n              children: plants.map(plant => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: plant._id,\n                children: plant.plantName\n              }, plant._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 594,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 586,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 584,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 6,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            sx: {\n              mb: 2\n            },\n            disabled: !selectedPlant || loading,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"device-select-label\",\n              children: \"Select Device\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 604,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"device-select-label\",\n              value: selectedDevice,\n              onChange: handleDeviceChange,\n              label: \"Select Device\",\n              children: devices.map(device => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: device._id,\n                children: device.deviceName\n              }, device._id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 612,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 605,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 603,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 9\n      }, this), loading && /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          justifyContent: 'center',\n          my: 4\n        },\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 623,\n        columnNumber: 11\n      }, this), selectedDevice && !loading && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            border: 1,\n            borderColor: 'divider',\n            borderRadius: 1,\n            overflow: 'hidden'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: activeTab === \"status\" ? \"contained\" : \"text\",\n            onClick: () => setActiveTab(\"status\"),\n            sx: {\n              flex: 1,\n              py: 1.5,\n              borderRadius: 0,\n              color: activeTab === \"status\" ? \"#fff\" : \"inherit\",\n              backgroundColor: activeTab === \"status\" ? \"#1976d2\" : \"transparent\"\n            },\n            children: [\"Status\", activeTab === \"status\" && /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              sx: {\n                ml: 1\n              },\n              children: getConnectionStatus()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 653,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 640,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            orientation: \"vertical\",\n            flexItem: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 659,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: activeTab === \"alarms\" ? \"contained\" : \"text\",\n            onClick: () => setActiveTab(\"alarms\"),\n            sx: {\n              flex: 1,\n              py: 1.5,\n              borderRadius: 0,\n              color: activeTab === \"alarms\" ? \"#fff\" : \"inherit\",\n              backgroundColor: activeTab === \"alarms\" ? \"#1976d2\" : \"transparent\"\n            },\n            children: [\"Alarms\", activeTab === \"alarms\" && latestEntry && /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              sx: {\n                ml: 1\n              },\n              children: [\"console.log(\\\"latestEntry:\\\", latestEntry); console.log(\\\"Type of latestEntry.openAlerts:\\\", typeof latestEntry.openAlerts);\", latestEntry.openAlerts || 0, \" Open Alerts\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 674,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 661,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            orientation: \"vertical\",\n            flexItem: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 683,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: activeTab === \"cmd\" ? \"contained\" : \"text\",\n            onClick: () => setActiveTab(\"cmd\"),\n            sx: {\n              flex: 1,\n              py: 1.5,\n              borderRadius: 0,\n              color: activeTab === \"cmd\" ? \"#fff\" : \"inherit\",\n              backgroundColor: activeTab === \"cmd\" ? \"#1976d2\" : \"transparent\"\n            },\n            children: \"Command Center\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 685,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 631,\n          columnNumber: 13\n        }, this), error && /*#__PURE__*/_jsxDEV(Paper, {\n          sx: {\n            p: 2,\n            mt: 2,\n            bgcolor: 'error.light',\n            color: 'error.main',\n            borderRadius: 1\n          },\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 711,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 702,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mt: 3\n          },\n          children: [activeTab === \"status\" && /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [renderDeviceMetrics(), renderCharts()]\n          }, void 0, true), activeTab === \"alarms\" && renderAlarmsTab(), activeTab === \"cmd\" && renderCommandCenterTab()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 716,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 576,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 574,\n    columnNumber: 5\n  }, this);\n};\n_s2(TelemetryDashboard, \"Jf4zGeW2o5dFSOt15YHpQkEd61Q=\", false, function () {\n  return [useTheme];\n});\n_c2 = TelemetryDashboard;\nexport default TelemetryDashboard;\nvar _c, _c2;\n$RefreshReg$(_c, \"MetricCircle\");\n$RefreshReg$(_c2, \"TelemetryDashboard\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","getPlants","getDevices","getLatestTelemetryEntry","getRealtimeTelemetryData","getTelemetryData","clearDeviceCache","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","ArcElement","register","Container","Select","MenuItem","FormControl","InputLabel","Table","TableBody","TableCell","TableHead","TableRow","Paper","Box","Typography","CircularProgress","Button","Grid","Divider","TableContainer","Sidebar","useTheme","jsxDEV","_jsxDEV","Fragment","_Fragment","MetricCircle","value","label","color","size","thickness","_s","theme","displayValue","sx","display","flexDirection","alignItems","m","children","position","mb","variant","palette","primary","main","transform","strokeLinecap","fileName","_jsxFileName","lineNumber","columnNumber","top","left","bottom","right","justifyContent","component","fontWeight","_c","TelemetryDashboard","_s2","plants","setPlants","devices","setDevices","selectedPlant","setSelectedPlant","selectedDevice","setSelectedDevice","telemetryData","setTelemetryData","latestEntry","setLatestEntry","realtimeData","setRealtimeData","loading","setLoading","error","setError","activeTab","setActiveTab","connectionStatus","setConnectionStatus","fetchPlants","plantData","length","_id","console","fetchDevices","deviceData","fetchLatestEntry","data","fetchRealtimeData","historicalData","slice","innerError","fetchHistoricalData","sortedData","sort","a","b","Date","timestamp","latestInterval","setInterval","realtimeInterval","historicalInterval","clearInterval","temperatureChartData","labels","map","toLocaleTimeString","hour","minute","datasets","temperature","borderColor","backgroundColor","borderWidth","pointRadius","tension","fill","oilLevelChartData","oilLevel","chartOptions","responsive","maintainAspectRatio","plugins","legend","boxWidth","usePointStyle","pointStyle","tooltip","mode","intersect","scales","y","beginAtZero","grid","ticks","font","x","maxRotation","minRotation","animation","duration","handlePlantChange","e","newPlantId","target","handleDeviceChange","newDeviceId","getConnectionStatus","renderAlarmsTab","textAlign","py","openAlerts","renderCommandCenterTab","renderDeviceMetrics","mt","flexWrap","humidity","renderCharts","container","spacing","item","xs","md","p","height","options","index","toLocaleString","year","month","day","second","colSpan","align","maxWidth","ml","fullWidth","id","labelId","onChange","disabled","plant","plantName","device","deviceName","my","border","borderRadius","overflow","onClick","flex","orientation","flexItem","bgcolor","_c2","$RefreshReg$"],"sources":["C:/Users/Garvisha/Desktop/New folder (2)/Front/oxygen-frontend/src/pages/TelemetryDashboard.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from \"react\";\nimport { getPlants } from \"../services/plantService\";\nimport { getDevices } from \"../services/deviceService\";\nimport { \n  getLatestTelemetryEntry, \n  getRealtimeTelemetryData, \n  getTelemetryData,\n  clearDeviceCache \n} from \"../services/telemetryService\";\nimport { Line } from \"react-chartjs-2\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n} from \"chart.js\";\n\nChartJS.register(\n  CategoryScale, \n  LinearScale, \n  PointElement, \n  LineElement, \n  Title, \n  Tooltip, \n  Legend,\n  ArcElement\n);\n\nimport {\n  Container,\n  Select,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n  Paper,\n  Box,\n  Typography,\n  CircularProgress,\n  Button,\n  Grid,\n  Divider,\n  TableContainer,\n} from \"@mui/material\";\n\nimport Sidebar from \"../components/Sidebar\";\nimport { useTheme } from '@mui/material/styles';\n\n// Custom circular progress visualization component that matches the reference UI\nconst MetricCircle = ({ value, label, color, size = 100, thickness = 5 }) => {\n  const theme = useTheme();\n  const displayValue = value || 0;\n  \n  return (\n    <Box sx={{ \n      display: 'flex', \n      flexDirection: 'column', \n      alignItems: 'center',\n      m: 2\n    }}>\n      <Box sx={{ \n        position: 'relative', \n        display: 'inline-flex',\n        mb: 1\n      }}>\n        <CircularProgress\n          variant=\"determinate\"\n          value={75} // Fixed angle for the visual style\n          size={size}\n          thickness={thickness}\n          sx={{ \n            color: color || theme.palette.primary.main,\n            transform: 'rotate(135deg)',\n            '& .MuiCircularProgress-circle': {\n              strokeLinecap: 'round',\n            }\n          }}\n        />\n        <Box\n          sx={{\n            top: 0,\n            left: 0,\n            bottom: 0,\n            right: 0,\n            position: 'absolute',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          <Typography variant=\"h5\" component=\"div\" fontWeight=\"bold\">\n            {displayValue}\n            {label === 'Temperature' ? '°C' : label === 'Humidity' || label === 'Oil Level' ? '%' : ''}\n          </Typography>\n        </Box>\n      </Box>\n      <Typography variant=\"body1\" component=\"div\">\n        {label}\n      </Typography>\n    </Box>\n  );\n};\n\nconst TelemetryDashboard = () => {\n  const theme = useTheme();\n  const [plants, setPlants] = useState([]);\n  const [devices, setDevices] = useState([]);\n  const [selectedPlant, setSelectedPlant] = useState(\"\");\n  const [selectedDevice, setSelectedDevice] = useState(\"esp32\");\n  const [telemetryData, setTelemetryData] = useState([]);\n  const [latestEntry, setLatestEntry] = useState(null);\n  const [realtimeData, setRealtimeData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [activeTab, setActiveTab] = useState(\"status\");\n  const [connectionStatus, setConnectionStatus] = useState(\"disconnected\");\n\n  // Fetch plants on component mount\n  useEffect(() => {\n    const fetchPlants = async () => {\n      try {\n        setLoading(true);\n        const plantData = await getPlants();\n        if (plantData && plantData.length > 0) {\n          setPlants(plantData);\n          // Auto-select first plant if none selected\n          if (!selectedPlant && plantData.length > 0) {\n            setSelectedPlant(plantData[0]._id);\n          }\n        }\n      } catch (error) {\n        console.error(\"❌ Error fetching plants:\", error);\n        setError(\"Failed to load plants. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchPlants();\n  }, [selectedPlant]);\n\n  // Fetch devices when plant selection changes\n  useEffect(() => {\n    const fetchDevices = async () => {\n      if (!selectedPlant) {\n        setDevices([]);\n        setSelectedDevice(\"\");\n        return;\n      }\n      \n      try {\n        setLoading(true);\n        const deviceData = await getDevices(selectedPlant);\n        if (deviceData && deviceData.length > 0) {\n          setDevices(deviceData);\n          // Auto-select first device if none selected\n          if (!selectedDevice && deviceData.length > 0) {\n            setSelectedDevice(deviceData[0]._id);\n          }\n        } else {\n          setDevices([]);\n          setSelectedDevice(\"\");\n        }\n      } catch (error) {\n        console.error(\"❌ Error fetching devices:\", error);\n        setError(\"Failed to load devices. Please try again.\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchDevices();\n  }, [selectedPlant]);\n\n  // Fetch latest telemetry entry for dashboard metrics\n  const fetchLatestEntry = useCallback(async () => {\n    if (!selectedDevice) {\n      setLatestEntry(null);\n      setConnectionStatus(\"disconnected\");\n      return;\n    }\n    \n    try {\n      const data = await getLatestTelemetryEntry(selectedDevice);\n      if (data) {\n        setLatestEntry(data);\n        setConnectionStatus(\"connected\");\n        setError(null);\n      } else {\n        setConnectionStatus(\"no data\");\n        setError(\"No telemetry data available for this device. Showing latest stored data if available.\");\n      }\n    } catch (error) {\n      console.error(\"❌ Error fetching latest telemetry:\", error);\n      setConnectionStatus(\"error\");\n      setError(\"Failed to fetch latest telemetry data. Showing latest stored data if available.\");\n    }\n  }, [selectedDevice]);\n\n  // Fetch realtime telemetry data for charts\n  const fetchRealtimeData = useCallback(async () => {\n    if (!selectedDevice) {\n      setRealtimeData([]);\n      return;\n    }\n    \n    try {\n      setLoading(true);\n      const data = await getRealtimeTelemetryData(selectedDevice);\n      setLoading(false);\n      \n      if (data && data.length > 0) {\n        setRealtimeData(data);\n        setError(null);\n      } else {\n        // If no realtime data, try to use historical data\n        try {\n          const historicalData = await getTelemetryData(selectedDevice);\n          if (historicalData && historicalData.length > 0) {\n            setRealtimeData(historicalData.slice(0, 20));\n            setError(\"No real-time data available. Showing historical data instead.\");\n          } else {\n            setError(\"No telemetry data available in CosmosDB for this device.\");\n          }\n        } catch (innerError) {\n          console.error(\"❌ Error fetching historical data as fallback:\", innerError);\n          setError(\"Failed to fetch any telemetry data from CosmosDB.\");\n        }\n      }\n    } catch (error) {\n      setLoading(false);\n      console.error(\"❌ Error fetching realtime data:\", error);\n      setError(\"Failed to fetch real-time data from CosmosDB. Check connection settings.\");\n    }\n  }, [selectedDevice]);\n\n  // Fetch historical telemetry data for tables\n  const fetchHistoricalData = useCallback(async () => {\n    if (!selectedDevice) {\n      setTelemetryData([]);\n      return;\n    }\n    \n    try {\n      setLoading(true);\n      const data = await getTelemetryData(selectedDevice);\n      setLoading(false);\n      \n      if (data && data.length > 0) {\n        setTelemetryData(data.slice(0, 20)); // Last 20 entries\n        setError(null);\n        \n        // If we have historical data but no latest entry, use the most recent historical entry\n        if (!latestEntry && data.length > 0) {\n          // Sort by timestamp, newest first\n          const sortedData = [...data].sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));\n          setLatestEntry(sortedData[0]);\n        }\n      } else {\n        setError(\"No historical telemetry data available in CosmosDB for this device.\");\n      }\n    } catch (error) {\n      setLoading(false);\n      console.error(\"❌ Error fetching historical data:\", error);\n      setError(\"Failed to fetch telemetry data from CosmosDB. Please check connection settings.\");\n    }\n  }, [selectedDevice, latestEntry]);\n\n  // Set up polling intervals when device changes\n  useEffect(() => {\n    if (!selectedDevice) return;\n    \n    // Clear cache when switching devices\n    clearDeviceCache(selectedDevice);\n    \n    // Initial fetches\n    fetchLatestEntry();\n    fetchRealtimeData();\n    fetchHistoricalData();\n    \n    // Set up polling intervals\n    const latestInterval = setInterval(fetchLatestEntry, 2000);\n    const realtimeInterval = setInterval(fetchRealtimeData, 3000);\n    const historicalInterval = setInterval(fetchHistoricalData, 10000);\n    \n    // Cleanup intervals on unmount or device change\n    return () => {\n      clearInterval(latestInterval);\n      clearInterval(realtimeInterval);\n      clearInterval(historicalInterval);\n    };\n  }, [selectedDevice, fetchLatestEntry, fetchRealtimeData, fetchHistoricalData]);\n\n  // Format data for temperature chart\n  const temperatureChartData = {\n    labels: realtimeData.map((data) => \n      new Date(data.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})\n    ),\n    datasets: [\n      {\n        label: \"Temperature (°C)\",\n        data: realtimeData.map((data) => data.temperature),\n        borderColor: \"#ff6b8b\",\n        backgroundColor: \"rgba(255, 107, 139, 0.1)\",\n        borderWidth: 2,\n        pointRadius: 2,\n        tension: 0.3,\n        fill: false,\n      },\n    ],\n  };\n\n  // Format data for oil level chart\n  const oilLevelChartData = {\n    labels: realtimeData.map((data) => \n      new Date(data.timestamp).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})\n    ),\n    datasets: [\n      {\n        label: \"Oil Level (%)\",\n        data: realtimeData.map((data) => data.oilLevel),\n        borderColor: \"#4dabf5\",\n        backgroundColor: \"rgba(77, 171, 245, 0.1)\",\n        borderWidth: 2,\n        pointRadius: 2,\n        tension: 0.3,\n        fill: false,\n      },\n    ],\n  };\n\n  // Chart options for better appearance to match reference UI\n  const chartOptions = {\n    responsive: true,\n    maintainAspectRatio: false,\n    plugins: {\n      legend: {\n        position: 'top',\n        labels: {\n          boxWidth: 10,\n          usePointStyle: true,\n          pointStyle: 'rect'\n        }\n      },\n      tooltip: {\n        mode: 'index',\n        intersect: false,\n      },\n    },\n    scales: {\n      y: {\n        beginAtZero: false,\n        grid: {\n          display: true,\n          color: 'rgba(200, 200, 200, 0.1)',\n        },\n        ticks: {\n          font: {\n            size: 10\n          }\n        }\n      },\n      x: {\n        grid: {\n          display: false,\n        },\n        ticks: {\n          maxRotation: 45,\n          minRotation: 45,\n          font: {\n            size: 10\n          }\n        }\n      },\n    },\n    animation: {\n      duration: 500,\n    },\n  };\n\n  // Handlers for select changes\n  const handlePlantChange = (e) => {\n    const newPlantId = e.target.value;\n    setSelectedPlant(newPlantId);\n    setSelectedDevice(\"\");\n    clearDeviceCache(); // Clear all device cache when plant changes\n  };\n\n  const handleDeviceChange = (e) => {\n    const newDeviceId = e.target.value;\n    setSelectedDevice(newDeviceId);\n    clearDeviceCache(newDeviceId); // Clear cache for this specific device\n  };\n\n  // Render connection status indicator\n  const getConnectionStatus = () => {\n    if (connectionStatus === \"connected\") {\n      return \"Connected\";\n    } else if (connectionStatus === \"disconnected\") {\n      return \"Disconnected\";\n    } else if (connectionStatus === \"error\") {\n      return \"Connection Error\";\n    } else if (connectionStatus === \"no data\") {\n      return \"No data available\";\n    }\n    return \"Unknown\";\n  };\n\n  // Render the alarms tab content\n  const renderAlarmsTab = () => {\n    return (\n      <Box sx={{ textAlign: 'center', py: 2 }}>\n        {latestEntry ? (\n          <Typography variant=\"h6\">\n            {latestEntry.openAlerts || 0} Open Alerts\n          </Typography>\n        ) : (\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            No alerts data available\n          </Typography>\n        )}\n      </Box>\n    );\n  };\n\n  // Render the command center tab content\n  const renderCommandCenterTab = () => {\n    return (\n      <Box sx={{ textAlign: 'center', py: 2 }}>\n        <Typography variant=\"body1\" color=\"text.secondary\">\n          Command Center functionality coming soon\n        </Typography>\n      </Box>\n    );\n  };\n\n  // Render device metrics in the status tab\n  const renderDeviceMetrics = () => {\n    if (!latestEntry) {\n      return (\n        <Box sx={{ textAlign: 'center', py: 3 }}>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            No telemetry data available for this device. Please check CosmosDB connection.\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 2 }}>\n            If this is a real device and data exists in CosmosDB, check that device IDs match between the frontend and database.\n          </Typography>\n        </Box>\n      );\n    }\n\n    return (\n      <Box sx={{ mt: 3 }}>\n        <Typography variant=\"h6\" fontWeight=\"bold\" mb={2}>\n          Device Metrics\n        </Typography>\n        <Box sx={{ \n          display: 'flex', \n          justifyContent: 'space-around', \n          flexWrap: 'wrap',\n          mb: 3 \n        }}>\n          <MetricCircle \n            value={latestEntry.openAlerts || 0} \n            label=\"Open Alerts\" \n            color=\"#f44336\" // red\n          />\n          <MetricCircle \n            value={latestEntry.temperature || 0} \n            label=\"Temperature\" \n            color=\"#ff9800\" // orange\n          />\n          <MetricCircle \n            value={latestEntry.humidity || 0} \n            label=\"Humidity\" \n            color=\"#2196f3\" // blue\n          />\n          <MetricCircle \n            value={latestEntry.oilLevel || 0} \n            label=\"Oil Level\" \n            color=\"#4caf50\" // green\n          />\n        </Box>\n      </Box>\n    );\n  };\n\n  // Render charts section\n  const renderCharts = () => {\n    if (realtimeData.length === 0) {\n      return (\n        <Box sx={{ textAlign: 'center', py: 3, mt: 3 }}>\n          <Typography variant=\"body1\" color=\"text.secondary\">\n            No telemetry data available in CosmosDB to display charts.\n          </Typography>\n          <Typography variant=\"body2\" color=\"text.secondary\" sx={{ mt: 1 }}>\n            Please ensure data is being properly stored in the CosmosDB container.\n          </Typography>\n        </Box>\n      );\n    }\n\n    return (\n      <>\n        <Grid container spacing={3} sx={{ mt: 2 }}>\n          <Grid item xs={12} md={6}>\n            <Typography variant=\"h6\" mb={1}>Temperature Over Time</Typography>\n            <Paper sx={{ p: 2, height: 250 }}>\n              <Line data={temperatureChartData} options={chartOptions} />\n            </Paper>\n          </Grid>\n          \n          <Grid item xs={12} md={6}>\n            <Typography variant=\"h6\" mb={1}>Oil Level Over Time</Typography>\n            <Paper sx={{ p: 2, height: 250 }}>\n              <Line data={oilLevelChartData} options={chartOptions} />\n            </Paper>\n          </Grid>\n        </Grid>\n\n        <Box sx={{ mt: 4 }}>\n          <Typography variant=\"h6\" mb={1}>Latest Readings</Typography>\n          <TableContainer component={Paper}>\n            <Table size=\"small\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>Timestamp</TableCell>\n                  <TableCell>Temperature (°C)</TableCell>\n                  <TableCell>Oil Level (%)</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {telemetryData.length > 0 ? (\n                  telemetryData.map((item, index) => (\n                    <TableRow key={index}>\n                      <TableCell>\n                        {new Date(item.timestamp).toLocaleString([], {\n                          year: 'numeric',\n                          month: 'numeric',\n                          day: 'numeric',\n                          hour: '2-digit',\n                          minute: '2-digit',\n                          second: '2-digit'\n                        })}\n                      </TableCell>\n                      <TableCell>{item.temperature}</TableCell>\n                      <TableCell>{item.oilLevel}</TableCell>\n                    </TableRow>\n                  ))\n                ) : (\n                  <TableRow>\n                    <TableCell colSpan={3} align=\"center\">\n                      No data available\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </Box>\n      </>\n    );\n  };\n\n  return (\n    <Box sx={{ display: \"flex\" }}>\n      <Sidebar />\n      <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4, ml: 4 }}>\n        <Typography variant=\"h4\" fontWeight=\"bold\" mb={3}>\n          Telemetry Dashboard\n        </Typography>\n        \n        {/* Plant and Device Selection */}\n        <Grid container spacing={2}>\n          <Grid item xs={12} md={6}>\n            <FormControl fullWidth sx={{ mb: 2 }}>\n              <InputLabel id=\"plant-select-label\">Select Plant</InputLabel>\n              <Select\n                labelId=\"plant-select-label\"\n                value={selectedPlant}\n                onChange={handlePlantChange}\n                label=\"Select Plant\"\n                disabled={loading}\n              >\n                {plants.map((plant) => (\n                  <MenuItem key={plant._id} value={plant._id}>\n                    {plant.plantName}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n          \n          <Grid item xs={12} md={6}>\n            <FormControl fullWidth sx={{ mb: 2 }} disabled={!selectedPlant || loading}>\n              <InputLabel id=\"device-select-label\">Select Device</InputLabel>\n              <Select\n                labelId=\"device-select-label\"\n                value={selectedDevice}\n                onChange={handleDeviceChange}\n                label=\"Select Device\"\n              >\n                {devices.map((device) => (\n                  <MenuItem key={device._id} value={device._id}>\n                    {device.deviceName}\n                  </MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </Grid>\n        </Grid>\n\n        {/* Loading indicator */}\n        {loading && (\n          <Box sx={{ display: 'flex', justifyContent: 'center', my: 4 }}>\n            <CircularProgress />\n          </Box>\n        )}\n        \n        {/* Tab navigation */}\n        {selectedDevice && !loading && (\n          <>\n            <Box \n              sx={{ \n                display: 'flex',\n                border: 1,\n                borderColor: 'divider',\n                borderRadius: 1,\n                overflow: 'hidden'\n              }}\n            >\n              <Button \n                variant={activeTab === \"status\" ? \"contained\" : \"text\"}\n                onClick={() => setActiveTab(\"status\")}\n                sx={{ \n                  flex: 1, \n                  py: 1.5,\n                  borderRadius: 0,\n                  color: activeTab === \"status\" ? \"#fff\" : \"inherit\",\n                  backgroundColor: activeTab === \"status\" ? \"#1976d2\" : \"transparent\"\n                }}\n              >\n                Status\n                {activeTab === \"status\" && (\n                  <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                    {getConnectionStatus()}\n                  </Typography>\n                )}\n              </Button>\n              \n              <Divider orientation=\"vertical\" flexItem />\n              \n              <Button \n                variant={activeTab === \"alarms\" ? \"contained\" : \"text\"}\n                onClick={() => setActiveTab(\"alarms\")}\n                sx={{ \n                  flex: 1, \n                  py: 1.5,\n                  borderRadius: 0,\n                  color: activeTab === \"alarms\" ? \"#fff\" : \"inherit\",\n                  backgroundColor: activeTab === \"alarms\" ? \"#1976d2\" : \"transparent\"\n                }}\n              >\n                Alarms\n                {activeTab === \"alarms\" && latestEntry && (\n                  <Typography variant=\"caption\" sx={{ ml: 1 }}>\n                    console.log(\"latestEntry:\", latestEntry);\nconsole.log(\"Type of latestEntry.openAlerts:\", typeof latestEntry.openAlerts);\n\n                    {latestEntry.openAlerts || 0} Open Alerts\n                  </Typography>\n                )}\n              </Button>\n              \n              <Divider orientation=\"vertical\" flexItem />\n              \n              <Button \n                variant={activeTab === \"cmd\" ? \"contained\" : \"text\"}\n                onClick={() => setActiveTab(\"cmd\")}\n                sx={{ \n                  flex: 1, \n                  py: 1.5,\n                  borderRadius: 0,\n                  color: activeTab === \"cmd\" ? \"#fff\" : \"inherit\",\n                  backgroundColor: activeTab === \"cmd\" ? \"#1976d2\" : \"transparent\"\n                }}\n              >\n                Command Center\n              </Button>\n            </Box>\n\n            {/* Error message */}\n            {error && (\n              <Paper \n                sx={{ \n                  p: 2, \n                  mt: 2, \n                  bgcolor: 'error.light', \n                  color: 'error.main',\n                  borderRadius: 1\n                }}\n              >\n                <Typography>{error}</Typography>\n              </Paper>\n            )}\n            \n            {/* Tab content */}\n            <Box sx={{ mt: 3 }}>\n              {activeTab === \"status\" && (\n                <>\n                  {renderDeviceMetrics()}\n                  {renderCharts()}\n                </>\n              )}\n              \n              {activeTab === \"alarms\" && renderAlarmsTab()}\n              \n              {activeTab === \"cmd\" && renderCommandCenterTab()}\n            </Box>\n          </>\n        )}\n      </Container>\n    </Box>\n  );\n};\n\nexport default TelemetryDashboard;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}